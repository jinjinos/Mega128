###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.20.2.50573 for Atmel AVR        12/Sep/2016  16:06:13 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Admin\Desktop\ATmega128Project\src\uart.c       #
#    Command line =  C:\Users\Admin\Desktop\ATmega128Project\src\uart.c       #
#                    --cpu=m128a -ms -o C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\Obj\ -lCN C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -lb C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -y --initializers_in_flash --no_cse       #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Admin\Desktop\ATmega128Project\inc\             #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Admin\Desktop\ATmega128Project\Debug\List\uart. #
#                    lst                                                      #
#    Object file  =  C:\Users\Admin\Desktop\ATmega128Project\Debug\Obj\uart.r #
#                    90                                                       #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Admin\Desktop\ATmega128Project\src\uart.c
      1          /* 从原理图知道  UART0的RXD接PE0，TXD接PE1 */
      2          /* 从原理图知道  UART1的RXD接PD2, TXD接PD3*/
      3          
      4          
      5          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x29
   \   union <unnamed> volatile __io _A_UBRR0L
   \                     _A_UBRR0L:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90
   \   union <unnamed> volatile __io _A_UBRR0H
   \                     _A_UBRR0H:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x95
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1
      6          #include "uart.h"
      7          #include <stdio.h>
      8          #include <stdarg.h>
      9          
     10          #ifdef __GNUC__
     11            /* With GCC/RAISONANCE, small printf (option LD Linker->Libraries->Small printf
     12               set to 'Yes') calls __io_putchar() */
     13            #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
     14          #else
     15            #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
     16          #endif /* __GNUC__ */
     17          
     18          
     19          
     20          
     21          //串口初始化，通过宏定义USART0/USART1来控制初始化哪一个串口

   \                                 In  segment CODE, align 2, keep-with-next
     22          void USART_Init(unsigned long baud)
   \                     USART_Init:
     23          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     24          	//USART控制和状态寄存器
     25          	UCSRnA = 0x00;		//设置为单倍率模式
   \   00000008   E000               LDI     R16, 0
   \   0000000A   B90B               OUT     0x0B, R16
     26          	UCSRnB = 0x98;		//接收和发送使能。接收中断允许
   \   0000000C   E908               LDI     R16, 152
   \   0000000E   B90A               OUT     0x0A, R16
     27          	UCSRnC = 0x06;		//异步通信，无校验，1位停止位，8位数据位
   \   00000010   E006               LDI     R16, 6
   \   00000012   9300....           STS     _A_UCSR0C, R16
     28          	//USART波特率寄存器，设置波特率
     29          	UBRRnH = BAUD_H(baud);	//设置波特率高位
   \   00000016   E140               LDI     R20, 16
   \   00000018   E050               LDI     R21, 0
   \   0000001A   E060               LDI     R22, 0
   \   0000001C   E070               LDI     R23, 0
   \   0000001E   018C               MOVW    R17:R16, R25:R24
   \   00000020   019D               MOVW    R19:R18, R27:R26
   \   00000022   ........           CALL    ?L_EC_MUL_L03
   \   00000026   01A8               MOVW    R21:R20, R17:R16
   \   00000028   01B9               MOVW    R23:R22, R19:R18
   \   0000002A   E000               LDI     R16, 0
   \   0000002C   E810               LDI     R17, 128
   \   0000002E   E720               LDI     R18, 112
   \   00000030   E030               LDI     R19, 0
   \   00000032   ........           CALL    ?UL_DIVMOD_L03
   \   00000036   01F8               MOVW    R31:R30, R17:R16
   \   00000038   9731               SBIW    R31:R30, 1
   \   0000003A   2FEF               MOV     R30, R31
   \   0000003C   E0F0               LDI     R31, 0
   \   0000003E   93E0....           STS     _A_UBRR0H, R30
     30          	UBRRnL = BAUD_L(baud);
   \   00000042   E140               LDI     R20, 16
   \   00000044   E050               LDI     R21, 0
   \   00000046   E060               LDI     R22, 0
   \   00000048   E070               LDI     R23, 0
   \   0000004A   018C               MOVW    R17:R16, R25:R24
   \   0000004C   019D               MOVW    R19:R18, R27:R26
   \   0000004E   ........           CALL    ?L_EC_MUL_L03
   \   00000052   01A8               MOVW    R21:R20, R17:R16
   \   00000054   01B9               MOVW    R23:R22, R19:R18
   \   00000056   E000               LDI     R16, 0
   \   00000058   E810               LDI     R17, 128
   \   0000005A   E720               LDI     R18, 112
   \   0000005C   E030               LDI     R19, 0
   \   0000005E   ........           CALL    ?UL_DIVMOD_L03
   \   00000062   950A               DEC     R16
   \   00000064   B909               OUT     0x09, R16
     31          }
   \   00000066   E0E4               LDI     R30, 4
   \   00000068   ........           JMP     ?EPILOGUE_B4_L09
   \   0000006C                      REQUIRE _A_UCSR0A
   \   0000006C                      REQUIRE _A_UCSR0B
   \   0000006C                      REQUIRE _A_UCSR0C
   \   0000006C                      REQUIRE _A_UBRR0H
   \   0000006C                      REQUIRE _A_UBRR0L
     32          
     33          
     34          //发送一个字节的数据

   \                                 In  segment CODE, align 2, keep-with-next
     35          void SendByte(unsigned char data)
   \                     SendByte:
   \                     ??SendByte_0:
     36          {
     37          	//1.等待发送缓存器为空 判断UCSR0A的UDRE位是否为空 
     38          	while( !( UCSRnA & (1 << 5) ) );
   \   00000000   9B5D               SBIS    0x0B, 0x05
   \   00000002   CFFE               RJMP    ??SendByte_0
     39          	//将数据放入发送缓冲器，发送数据
     40          	UDRn = data;
   \   00000004   B90C               OUT     0x0C, R16
     41          	
     42          	//2.如果使用TXC，0x40判断，则需要先接受数据，并且写1清零
     43          //	while(!( UCSR0A & (1 << 6) ));
     44          //	UCSR0A |= 0x40;
     45          }
   \   00000006   9508               RET
   \   00000008                      REQUIRE _A_UCSR0A
   \   00000008                      REQUIRE _A_UDR0
     46          
     47          
     48          //发送一个字符串

   \                                 In  segment CODE, align 2, keep-with-next
     49          void SendStr(unsigned char *str)
   \                     SendStr:
     50          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     51          	while( *str != '\0')
   \                     ??SendStr_0:
   \   00000006   910C               LD      R16, X
   \   00000008   2300               TST     R16
   \   0000000A   F021               BREQ    ??SendStr_1
     52          	{
     53          		SendByte(*str);
   \   0000000C   910C               LD      R16, X
   \   0000000E   ....               RCALL   SendByte
     54          		str++;
   \   00000010   9611               ADIW    R27:R26, 1
   \   00000012   CFF9               RJMP    ??SendStr_0
     55          	}
     56          }
   \                     ??SendStr_1:
   \   00000014   91A9               LD      R26, Y+
   \   00000016   91B9               LD      R27, Y+
   \   00000018   9508               RET
     57          
     58          
     59          //采用查询方式接收一个字节

   \                                 In  segment CODE, align 2, keep-with-next
     60          unsigned char ReceiveByte(void)
   \                     ReceiveByte:
   \                     ??ReceiveByte_0:
     61          {
     62          	unsigned char data;
     63          	//等待接收数据,判断UCSR0A的RXC位是否为空
     64          	while( !(UCSRnA & (1 << 7)) );
   \   00000000   9B5F               SBIS    0x0B, 0x07
   \   00000002   CFFE               RJMP    ??ReceiveByte_0
     65          	data = UDRn;
   \   00000004   B11C               IN      R17, 0x0C
   \   00000006   2F01               MOV     R16, R17
     66          	//发送的话自带回显功能
     67          	UDRn = data;
   \   00000008   B90C               OUT     0x0C, R16
     68          //	SendByte(data);
     69          	
     70          	return data;
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_UCSR0A
   \   0000000C                      REQUIRE _A_UDR0
     71          }
     72          
     73          
     74          //采用查询的方式接收一个字符串

   \                                 In  segment CODE, align 2, keep-with-next
     75          char * ReceiveString(char * pstr)
   \                     ReceiveString:
     76          {
   \   00000000   ........           CALL    ?PROLOGUE5_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004   01C8               MOVW    R25:R24, R17:R16
     77          	unsigned char data = 0;
   \   00000006   2444               CLR     R4
     78          	char * ptemp = pstr;
   \   00000008   01DC               MOVW    R27:R26, R25:R24
     79          	
     80          	//将接收到的字符存到ptemp指向的字符串
     81          	do
     82          	{
     83          		data = ReceiveByte();
   \                     ??ReceiveString_0:
   \   0000000A   ....               RCALL   ReceiveByte
   \   0000000C   2E40               MOV     R4, R16
     84          		* ptemp = data;
   \   0000000E   01FD               MOVW    R31:R30, R27:R26
   \   00000010   8240               ST      Z, R4
     85          		ptemp++;
   \   00000012   9611               ADIW    R27:R26, 1
     86          	}while(data != '#');		//约定字符串以‘#’结束
   \   00000014   E203               LDI     R16, 35
   \   00000016   1640               CP      R4, R16
   \   00000018   F7C1               BRNE    ??ReceiveString_0
     87          	
     88          	* (ptemp - 1) = '\0';		//将字符串末尾的‘#’修改为结束标志‘\0’
   \   0000001A   E000               LDI     R16, 0
   \   0000001C   01FD               MOVW    R31:R30, R27:R26
   \   0000001E   9731               SBIW    R31:R30, 1
   \   00000020   8300               ST      Z, R16
     89          	//发送结束标志
     90          	SendByte('\n');
   \   00000022   E00A               LDI     R16, 10
   \   00000024   ....               RCALL   SendByte
     91          	
     92          	return pstr;
   \   00000026   018C               MOVW    R17:R16, R25:R24
   \   00000028   E0E5               LDI     R30, 5
   \   0000002A   ........           JMP     ?EPILOGUE_B5_L09
     93          }
     94          
     95          //串口移植printf 

   \                                 In  segment CODE, align 2, keep-with-next
     96          PUTCHAR_PROTOTYPE
   \                     fputc:
     97          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01C8               MOVW    R25:R24, R17:R16
   \   00000006   01D9               MOVW    R27:R26, R19:R18
     98          	SendByte(ch);
   \   00000008   2F08               MOV     R16, R24
   \   0000000A   ....               RCALL   SendByte
     99          	return ch;
   \   0000000C   018C               MOVW    R17:R16, R25:R24
   \   0000000E   E0E4               LDI     R30, 4
   \   00000010   ........           JMP     ?EPILOGUE_B4_L09
    100          }
    101          
    102          
    103          /*			有问题，vsprintf死掉
    104          //串口移植printf
    105          void USART_printf(char * str,...)
    106          {
    107          	char buf[128] = {'\0'};
    108          	unsigned char i = 0;
    109          	va_list ptr;
    110          	va_start(ptr,str);
    111          	vsprintf(buf,str,ptr);
    112          	while(buf[i])
    113          	{
    114          		SendByte(buf[i]);
    115          		i++;		
    116          	}
    117          }
    118          */

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   ReceiveByte
      5      2   ReceiveString
        5      2   -> ReceiveByte
        5      2   -> SendByte
      0      2   SendByte
      2      2   SendStr
        2      2   -> SendByte
      4      4   USART_Init
      4      2   fputc
        4      2   -> SendByte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ReceiveByte
      46  ReceiveString
       8  SendByte
      26  SendStr
     108  USART_Init
       1  _A_UBRR0H
       1  _A_UBRR0L
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UDR0
      20  fputc

 
   6 bytes in segment ABSOLUTE
 220 bytes in segment CODE
 
 220 bytes of CODE memory
   0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
