///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR       20/Sep/2016  17:32:31 /
// Copyright 1996-2013 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  C:\Users\Administrator\Desktop\ATmega128Project\src\ISR /
//                    .c                                                      /
//    Command line =  C:\Users\Administrator\Desktop\ATmega128Project\src\ISR /
//                    .c --cpu=m128a -ms -o C:\Users\Administrator\Desktop\AT /
//                    mega128Project\Debug\Obj\ -lCN                          /
//                    C:\Users\Administrator\Desktop\ATmega128Project\Debug\L /
//                    ist\ -lb C:\Users\Administrator\Desktop\ATmega128Projec /
//                    t\Debug\List\ -y --initializers_in_flash --no_cse       /
//                    --no_inline --no_code_motion --no_cross_call            /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e -I                          /
//                    C:\Users\Administrator\Desktop\ATmega128Project\inc\    /
//                    --eeprom_size 4096 --dlib --dlib_config "D:\Program     /
//                    Files (x86)\IAR Systems\Embedded Workbench              /
//                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla             /
//                    --use_c++_inline -On                                    /
//    List file    =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\L /
//                    ist\ISR.s90                                             /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ISR

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?Register_R4_is_cg_reg
        EXTERN ?Register_R5_is_cg_reg
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBWEAK `?<Segment init: NEAR_Z>`
        PUBWEAK `??ADC_server??INTVEC 84`
        PUBWEAK `??INT0_server??INTVEC 4`
        PUBWEAK `??INTO_server??INTVEC 8`
        PUBWEAK `??TIMER0_OVF_server??INTVEC 64`
        PUBWEAK `??TIMER1_OVF_server??INTVEC 56`
        PUBWEAK `??USART0_RXC_server??INTVEC 72`
        PUBWEAK `??USART1_RXC_server??INTVEC 120`
        PUBLIC ADC_server
        PUBLIC INT0_server
        PUBLIC INTO_server
        PUBLIC TIMER0_OVF_server
        PUBLIC TIMER1_OVF_server
        PUBLIC USART0_RXC_server
        PUBLIC USART1_RXC_server
        PUBWEAK _A_ADC
        PUBWEAK _A_TCNT0
        PUBWEAK _A_TCNT1
        PUBWEAK _A_UCSR1A
        PUBWEAK _A_UDR0
        PUBWEAK _A_UDR1
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC count

ADC_server          SYMBOL "ADC_server"
`??ADC_server??INTVEC 84` SYMBOL "??INTVEC 84", ADC_server
INT0_server         SYMBOL "INT0_server"
`??INT0_server??INTVEC 4` SYMBOL "??INTVEC 4", INT0_server
INTO_server         SYMBOL "INTO_server"
`??INTO_server??INTVEC 8` SYMBOL "??INTVEC 8", INTO_server
TIMER0_OVF_server   SYMBOL "TIMER0_OVF_server"
`??TIMER0_OVF_server??INTVEC 64` SYMBOL "??INTVEC 64", TIMER0_OVF_server
TIMER1_OVF_server   SYMBOL "TIMER1_OVF_server"
`??TIMER1_OVF_server??INTVEC 56` SYMBOL "??INTVEC 56", TIMER1_OVF_server
USART0_RXC_server   SYMBOL "USART0_RXC_server"
`??USART0_RXC_server??INTVEC 72` SYMBOL "??INTVEC 72", USART0_RXC_server
USART1_RXC_server   SYMBOL "USART1_RXC_server"
`??USART1_RXC_server??INTVEC 120` SYMBOL "??INTVEC 120", USART1_RXC_server

        EXTERN printf


        ASEGN ABSOLUTE:DATA:NOROOT,024H
// union <unnamed> volatile __io _A_ADC
_A_ADC:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,02cH
// union <unnamed> volatile __io _A_UDR0
_A_UDR0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,04cH
// union <unnamed> volatile __io _A_TCNT1
_A_TCNT1:
        DS8 2

        ASEGN ABSOLUTE:DATA:NOROOT,052H
// union <unnamed> volatile __io _A_TCNT0
_A_TCNT0:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,09bH
// union <unnamed> volatile __io _A_UCSR1A
_A_UCSR1A:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,09cH
// union <unnamed> volatile __io _A_UDR1
_A_UDR1:
        DS8 1

        RSEG NEAR_Z:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_Z>`
count:
        DS8 2

        RSEG CODE:CODE:NOROOT(1)
INT0_server:
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R18, 0x3F
        IN      R19, 0x3B
        LDI     R16, 1
        LDI     R17, 0
        STS     count, R16
        STS     (count + 1), R17
        OUT     0x3B, R19
        OUT     0x3F, R18
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        RETI

        RSEG CODE:CODE:NOROOT(1)
INTO_server:
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R18, 0x3F
        IN      R19, 0x3B
        LDS     R16, count
        LDS     R17, (count + 1)
        OR      R16, R17
        BREQ    ??INTO_server_0
        LDI     R30, LOW(count)
        LDI     R31, (count) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 1
        SBCI    R17, 0
        ST      Z, R16
        STD     Z+1, R17
        RJMP    ??INTO_server_1
??INTO_server_0:
        LDI     R16, 16
        LDI     R17, 0
        STS     count, R16
        STS     (count + 1), R17
??INTO_server_1:
        OUT     0x3B, R19
        OUT     0x3F, R18
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        LD      R30, Y+
        LD      R31, Y+
        RETI

        RSEG CODE:CODE:NOROOT(1)
TIMER0_OVF_server:
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R18, 0x3F
        IN      R19, 0x3B
        LDI     R16, 184
        OUT     0x32, R16
        LDI     R30, LOW(count)
        LDI     R31, (count) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        OUT     0x3B, R19
        OUT     0x3F, R18
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        LD      R30, Y+
        LD      R31, Y+
        RETI
        REQUIRE _A_TCNT0

        RSEG CODE:CODE:NOROOT(1)
TIMER1_OVF_server:
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R18, 0x3F
        IN      R19, 0x3B
        LDI     R16, 227
        OUT     0x2D, R16
        LDI     R16, 223
        OUT     0x2C, R16
        LDI     R16, 223
        LDI     R17, 227
        OUT     0x2D, R17
        OUT     0x2C, R16
        LDI     R30, LOW(count)
        LDI     R31, (count) >> 8
        LD      R16, Z
        LDD     R17, Z+1
        SUBI    R16, 255
        SBCI    R17, 255
        ST      Z, R16
        STD     Z+1, R17
        OUT     0x3B, R19
        OUT     0x3F, R18
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        LD      R30, Y+
        LD      R31, Y+
        RETI
        REQUIRE _A_TCNT1

        RSEG CODE:CODE:NOROOT(1)
USART1_RXC_server:
        ST      -Y, R20
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R19, 0x3F
        IN      R20, 0x3B
        LDS     R17, _A_UCSR1A
        MOV     R18, R17
        SBRS    R18, 7
        RJMP    ??USART1_RXC_server_0
        LDS     R17, _A_UDR1
        MOV     R16, R17
        STS     _A_UDR1, R16
??USART1_RXC_server_0:
        OUT     0x3B, R20
        OUT     0x3F, R19
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        LD      R20, Y+
        RETI
        REQUIRE _A_UCSR1A
        REQUIRE _A_UDR1

        RSEG CODE:CODE:NOROOT(1)
USART0_RXC_server:
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R18, 0x3F
        IN      R19, 0x3B
        IN      R17, 0x0C
        MOV     R16, R17
        OUT     0x0C, R16
        OUT     0x3B, R19
        OUT     0x3F, R18
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        RETI
        REQUIRE _A_UDR0

        RSEG CODE:CODE:NOROOT(1)
ADC_server:
        ST      -Y, R5
        ST      -Y, R4
        ST      -Y, R27
        ST      -Y, R26
        ST      -Y, R25
        ST      -Y, R24
        ST      -Y, R31
        ST      -Y, R30
        ST      -Y, R3
        ST      -Y, R2
        ST      -Y, R1
        ST      -Y, R0
        ST      -Y, R23
        ST      -Y, R22
        ST      -Y, R21
        ST      -Y, R20
        ST      -Y, R19
        ST      -Y, R18
        ST      -Y, R17
        ST      -Y, R16
        IN      R4, 0x3F
        IN      R5, 0x3B
        REQUIRE ?Register_R4_is_cg_reg
        REQUIRE ?Register_R5_is_cg_reg
        IN      R16, 0x04
        MOV     R24, R16
        IN      R16, 0x05
        MOV     R25, R16
        MOV     R17, R25
        LDI     R16, 0
        MOV     R18, R24
        LDI     R19, 0
        ADD     R16, R18
        ADC     R17, R19
        MOVW    R27:R26, R17:R16
        ST      -Y, R27
        ST      -Y, R26
        LDI     R16, LOW(`?<Constant "ADC = % 4d\\r\\n">`)
        LDI     R17, (`?<Constant "ADC = % 4d\\r\\n">`) >> 8
        CALL    printf
        ADIW    R29:R28, 2
        OUT     0x3B, R5
        OUT     0x3F, R4
        LD      R16, Y+
        LD      R17, Y+
        LD      R18, Y+
        LD      R19, Y+
        LD      R20, Y+
        LD      R21, Y+
        LD      R22, Y+
        LD      R23, Y+
        LD      R0, Y+
        LD      R1, Y+
        LD      R2, Y+
        LD      R3, Y+
        LD      R30, Y+
        LD      R31, Y+
        LD      R24, Y+
        LD      R25, Y+
        LD      R26, Y+
        LD      R27, Y+
        LD      R4, Y+
        LD      R5, Y+
        RETI
        REQUIRE _A_ADC

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        COMMON INTVEC:CODE:ROOT(1)
        ORG 4
`??INT0_server??INTVEC 4`:
        JMP     INT0_server

        COMMON INTVEC:CODE:ROOT(1)
        ORG 8
`??INTO_server??INTVEC 8`:
        JMP     INTO_server

        COMMON INTVEC:CODE:ROOT(1)
        ORG 56
`??TIMER1_OVF_server??INTVEC 56`:
        JMP     TIMER1_OVF_server

        COMMON INTVEC:CODE:ROOT(1)
        ORG 64
`??TIMER0_OVF_server??INTVEC 64`:
        JMP     TIMER0_OVF_server

        COMMON INTVEC:CODE:ROOT(1)
        ORG 72
`??USART0_RXC_server??INTVEC 72`:
        JMP     USART0_RXC_server

        COMMON INTVEC:CODE:ROOT(1)
        ORG 84
`??ADC_server??INTVEC 84`:
        JMP     ADC_server

        COMMON INTVEC:CODE:ROOT(1)
        ORG 120
`??USART1_RXC_server??INTVEC 120`:
        JMP     USART1_RXC_server

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for <Constant "ADC = % 4d\\r\\n">>`:
        DC8 "ADC = % 4d\015\012"

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DP      SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_Z>`:
        DC16    SFE(NEAR_Z) - SFB(NEAR_Z)
        DC16    SFB(NEAR_Z)
        DP      0
        REQUIRE ?need_segment_init

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
`?<Constant "ADC = % 4d\\r\\n">`:
        DS8 13
        REQUIRE `?<Initializer for <Constant "ADC = % 4d\\r\\n">>`

        END
// 
//   8 bytes in segment ABSOLUTE
// 442 bytes in segment CODE
//  14 bytes in segment INITTAB
//  28 bytes in segment INTVEC
//  13 bytes in segment NEAR_I
//  13 bytes in segment NEAR_ID
//   2 bytes in segment NEAR_Z
// 
// 455 bytes of CODE memory (+ 42 bytes shared)
//  15 bytes of DATA memory (+  8 bytes shared)
//
//Errors: none
//Warnings: none
