###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR        20/Sep/2016  17:32:32 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\ATmega128Project\src\ds13 #
#                    02.c                                                     #
#    Command line =  C:\Users\Administrator\Desktop\ATmega128Project\src\ds13 #
#                    02.c --cpu=m128a -ms -o C:\Users\Administrator\Desktop\A #
#                    Tmega128Project\Debug\Obj\ -lCN                          #
#                    C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\ -lb C:\Users\Administrator\Desktop\ATmega128Project\ #
#                    Debug\List\ -y --initializers_in_flash --no_cse          #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Administrator\Desktop\ATmega128Project\inc\     #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\ds1302.lst                                            #
#    Object file  =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Ob #
#                    j\ds1302.r90                                             #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\ATmega128Project\src\ds1302.c
      1          /*
      2          **DS1302实时时钟芯片的驱动程序
      3          */
      4          
      5          #include <stdio.h>
      6          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      7          #include "ds1302.h"
      8          #include "ISR.h"
      9          
     10          //DS1302Init

   \                                 In  segment CODE, align 2, keep-with-next
     11          void ds1302_Init(void)
   \                     ds1302_Init:
     12          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   9728               SBIW    R29:R28, 8
     13          	unsigned char check = 0xAA;
   \   00000004   EA8A               LDI     R24, 170
     14          	unsigned char time_Init[8] = {0x20,0x16,0x08,0x12,0x08,0x44,0x50,0x02};
   \   00000006   01BE               MOVW    R23:R22, R29:R28
   \   00000008   ....               LDI     R30, LOW(`?<Constant {32, 22, 8, 18, 8, 68, 80, 2}>`)
   \   0000000A   ....               LDI     R31, HIGH(`?<Constant {32, 22, 8, 18, 8, 68, 80, 2}>`)
   \   0000000C   ....               LDI     R19, (`?<Constant {32, 22, 8, 18, 8, 68, 80, 2}>`) >> 16
   \   0000000E   018B               MOVW    R17:R16, R23:R22
   \   00000010   E048               LDI     R20, 8
   \   00000012   E050               LDI     R21, 0
   \   00000014   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
     15          	RST_CLR;		//RST = 0;
   \   00000018   981F               CBI     0x03, 0x07
     16          	SCK_CLR;		//SCLK = 0
   \   0000001A   981D               CBI     0x03, 0x05
     17          	RST_OUT;		//RST set to OUT mode
   \   0000001C   9A17               SBI     0x02, 0x07
     18          	SCK_OUT;		//SCLK set to OUT mode
   \   0000001E   9A15               SBI     0x02, 0x05
     19          	//may be need to write right time to ds1302
     20          	
     21          	//ds1302_sec_add 的第七位CH 如果为1 则停止工作，如果为0 ，则启动开始工作
     22          //	if(ds1302_Read_Byte(ds1302_sec_add) & 0x80)
     23          //两种判断模式任选其一	
     24          //TODO 如果初始化过就向第一个RAM地址中写入0xA5
     25          	if(ds1302_Read_Byte(ds1302_check_add) != check)
   \   00000020   EC00               LDI     R16, 192
   \   00000022   ....               RCALL   ds1302_Read_Byte
   \   00000024   1708               CP      R16, R24
   \   00000026   F021               BREQ    ??ds1302_Init_0
     26          	{
     27          		//初始化时间
     28          		ds1302_Write_Time(time_Init);
   \   00000028   018E               MOVW    R17:R16, R29:R28
   \   0000002A   ....               RCALL   ds1302_Write_Time
     29          		//写入初始化固定参数值
     30          		ds1302_Write_Check(check);
   \   0000002C   2F08               MOV     R16, R24
   \   0000002E   ....               RCALL   ds1302_Write_Check
     31          	}
     32          }
   \                     ??ds1302_Init_0:
   \   00000030   9628               ADIW    R29:R28, 8
   \   00000032   9189               LD      R24, Y+
   \   00000034   9508               RET
   \   00000036                      REQUIRE _A_PORTE
   \   00000036                      REQUIRE _A_DDRE
     33          
     34          /*****************************************
     35          **向DS1302写入一字节数据
     36          ******************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     37          void ds1302_Write_Byte(unsigned char addr,unsigned char d)
   \                     ds1302_Write_Byte:
     38          {
     39          	unsigned char i;
     40          	
     41          	RST_SET;			//启动DS1302总线
   \   00000000   9A1F               SBI     0x03, 0x07
     42          	
     43          	IO_OUT;
   \   00000002   9A16               SBI     0x02, 0x06
     44          	//先发送地址
     45          	addr = addr & 0xfe;		//最低位清零，写入模式
   \   00000004   7F0E               ANDI    R16, 0xFE
   \   00000006   E030               LDI     R19, 0
     46          	//一次按位在IO口输出电平，低位在前 01234567
     47          	for(i = 0; i < 8;i++)	
   \   00000008   E020               LDI     R18, 0
   \                     ??ds1302_Write_Byte_0:
   \   0000000A   3028               CPI     R18, 8
   \   0000000C   F450               BRCC    ??ds1302_Write_Byte_1
     48          	{
     49          		if(addr & 0x01)
   \   0000000E   FB00               BST     R16, 0
   \   00000010   F416               BRTC    ??ds1302_Write_Byte_2
     50          		{
     51          			IO_SET;
   \   00000012   9A1E               SBI     0x03, 0x06
   \   00000014   C001               RJMP    ??ds1302_Write_Byte_3
     52          		}
     53          		else
     54          		{
     55          			IO_CLR;
   \                     ??ds1302_Write_Byte_2:
   \   00000016   981E               CBI     0x03, 0x06
     56          		}
     57          		//时钟线给一个脉冲信号
     58          		SCK_SET;
   \                     ??ds1302_Write_Byte_3:
   \   00000018   9A1D               SBI     0x03, 0x05
     59          		SCK_CLR;
   \   0000001A   981D               CBI     0x03, 0x05
     60          		//右移一位，IO输出下一位的电平
     61          		addr = addr >> 1;
   \   0000001C   9506               LSR     R16
     62          	}
   \   0000001E   9523               INC     R18
   \   00000020   CFF4               RJMP    ??ds1302_Write_Byte_0
     63          	
     64          	//再发送数据
     65          	IO_OUT;					//配置为输出模式，可注释掉
   \                     ??ds1302_Write_Byte_1:
   \   00000022   9A16               SBI     0x02, 0x06
     66          	for(i = 0 ; i < 8; i++)
   \   00000024   E020               LDI     R18, 0
   \                     ??ds1302_Write_Byte_4:
   \   00000026   3028               CPI     R18, 8
   \   00000028   F450               BRCC    ??ds1302_Write_Byte_5
     67          	{
     68          		if(d & 0x01)
   \   0000002A   FB10               BST     R17, 0
   \   0000002C   F416               BRTC    ??ds1302_Write_Byte_6
     69          		{
     70          			IO_SET;			
   \   0000002E   9A1E               SBI     0x03, 0x06
   \   00000030   C001               RJMP    ??ds1302_Write_Byte_7
     71          		}
     72          		else
     73          		{
     74          			IO_CLR;
   \                     ??ds1302_Write_Byte_6:
   \   00000032   981E               CBI     0x03, 0x06
     75          		}
     76          		SCK_SET;
   \                     ??ds1302_Write_Byte_7:
   \   00000034   9A1D               SBI     0x03, 0x05
     77          		SCK_CLR;
   \   00000036   981D               CBI     0x03, 0x05
     78          		
     79          		d = d >> 1;
   \   00000038   9516               LSR     R17
     80          	}
   \   0000003A   9523               INC     R18
   \   0000003C   CFF4               RJMP    ??ds1302_Write_Byte_4
     81          	
     82          	RST_CLR;		//停止DS1302总线
   \                     ??ds1302_Write_Byte_5:
   \   0000003E   981F               CBI     0x03, 0x07
     83          }
   \   00000040   9508               RET
   \   00000042                      REQUIRE _A_PORTE
   \   00000042                      REQUIRE _A_DDRE
     84          
     85          
     86          /*****************************************
     87          **从DS1302读出一字节数据
     88          ******************************************/

   \                                 In  segment CODE, align 2, keep-with-next
     89          unsigned char ds1302_Read_Byte(unsigned char addr)
   \                     ds1302_Read_Byte:
     90          {
   \   00000000   2F30               MOV     R19, R16
     91          	unsigned char i = 0;
   \   00000002   E010               LDI     R17, 0
     92          	unsigned char temp = 0;
   \   00000004   E000               LDI     R16, 0
     93          	
     94          	RST_SET;		//start ds1302 io bus
   \   00000006   9A1F               SBI     0x03, 0x07
     95          	
     96          	//少写了IO_OUT，导致地址无法正确输出，每次读的时候只能第一次读到正确的数值
     97          	IO_OUT;
   \   00000008   9A16               SBI     0x02, 0x06
     98          	//transfer target-addr to ds1302
     99          	addr = addr | 0x01;			//lowest bit set 1, read mode
   \   0000000A   6031               ORI     R19, 0x01
   \   0000000C   E021               LDI     R18, 1
    100          	for(i = 0;i < 8; i++)
   \   0000000E   E010               LDI     R17, 0
   \                     ??ds1302_Read_Byte_0:
   \   00000010   3018               CPI     R17, 8
   \   00000012   F450               BRCC    ??ds1302_Read_Byte_1
    101          	{
    102          		if(addr & 0x01)
   \   00000014   FB30               BST     R19, 0
   \   00000016   F416               BRTC    ??ds1302_Read_Byte_2
    103          		{
    104          			IO_SET;
   \   00000018   9A1E               SBI     0x03, 0x06
   \   0000001A   C001               RJMP    ??ds1302_Read_Byte_3
    105          		}
    106          		else 
    107          		{
    108          			IO_CLR;
   \                     ??ds1302_Read_Byte_2:
   \   0000001C   981E               CBI     0x03, 0x06
    109          		}
    110          		//give me a SCLK maichong
    111          		SCK_SET;
   \                     ??ds1302_Read_Byte_3:
   \   0000001E   9A1D               SBI     0x03, 0x05
    112          		SCK_CLR;
   \   00000020   981D               CBI     0x03, 0x05
    113          		addr = addr >> 1;
   \   00000022   9536               LSR     R19
    114          	}
   \   00000024   9513               INC     R17
   \   00000026   CFF4               RJMP    ??ds1302_Read_Byte_0
    115          	//receive data from ds1302
    116          	IO_IN;	
   \                     ??ds1302_Read_Byte_1:
   \   00000028   9816               CBI     0x02, 0x06
    117          	IO_SET;			//上拉电阻生效
   \   0000002A   9A1E               SBI     0x03, 0x06
    118          
    119          	
    120          	for(i = 0; i < 8; i++)
   \   0000002C   E010               LDI     R17, 0
   \                     ??ds1302_Read_Byte_4:
   \   0000002E   3018               CPI     R17, 8
   \   00000030   F460               BRCC    ??ds1302_Read_Byte_5
    121          	{
    122          		temp = temp >> 1;
   \   00000032   9506               LSR     R16
    123          		if(IO_R)
   \   00000034   9B0E               SBIS    0x01, 0x06
   \   00000036   C003               RJMP    ??ds1302_Read_Byte_6
    124          		{
    125          			temp |= 0x80;	//set most bit = 1
   \   00000038   6800               ORI     R16, 0x80
   \   0000003A   E021               LDI     R18, 1
   \   0000003C   C002               RJMP    ??ds1302_Read_Byte_7
    126          		}
    127          		else
    128          		{
    129          			temp &= 0x7f;	//set most bit = 0
   \                     ??ds1302_Read_Byte_6:
   \   0000003E   770F               ANDI    R16, 0x7F
   \   00000040   E020               LDI     R18, 0
    130          		}
    131          		SCK_SET;
   \                     ??ds1302_Read_Byte_7:
   \   00000042   9A1D               SBI     0x03, 0x05
    132          		SCK_CLR;
   \   00000044   981D               CBI     0x03, 0x05
    133          	}
   \   00000046   9513               INC     R17
   \   00000048   CFF2               RJMP    ??ds1302_Read_Byte_4
    134          	RST_CLR;			//end the ds1302 IO bus
   \                     ??ds1302_Read_Byte_5:
   \   0000004A   981F               CBI     0x03, 0x07
    135          	return temp;
   \   0000004C   9508               RET
   \   0000004E                      REQUIRE _A_PORTE
   \   0000004E                      REQUIRE _A_DDRE
   \   0000004E                      REQUIRE _A_PINE
    136          }
    137          
    138          //store as BCD
    139          
    140          /*****************************************
    141          **write time to DS1302
    142          ******************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    143          void ds1302_Write_Time(unsigned char time_buf[])
   \                     ds1302_Write_Time:
    144          {
   \   00000000   93BA               ST      -Y, R27
   \   00000002   93AA               ST      -Y, R26
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    145          /* 
    146          **	this segment code is useless, make a Decimal array to HEX array
    147          **	why not just define it   
    148          */	
    149          /*	unsigned char i,tmp;
    150          	unsigned char time_buf1[8] ={20,16,08,11,16,52,0,6};//空年月日时分秒周
    151          	// deal with BCD
    152          	for(i = 1; i < 8;i++)
    153          	{
    154          		tmp = time_buf1[i] / 10;
    155          		time_buf[i] = time_buf1[i] % 10;
    156          		time_buf[i] = time_buf[i] + tmp * 16;
    157          	}		
    158          */
    159          	ds1302_Write_Byte(ds1302_control_add,0x00);			//关闭写保护 
   \   00000006   E010               LDI     R17, 0
   \   00000008   E80E               LDI     R16, 142
   \   0000000A   ....               RCALL   ds1302_Write_Byte
    160          	ds1302_Write_Byte(ds1302_sec_add,0x80);				//暂停  ds1302_sec_add 的最高位CH为1 ,则停止工作
   \   0000000C   E810               LDI     R17, 128
   \   0000000E   E800               LDI     R16, 128
   \   00000010   ....               RCALL   ds1302_Write_Byte
    161          //	ds1302_Write_Byte(ds1302_charger_add,0xa9);			//涓流充电 
    162          	ds1302_Write_Byte(ds1302_year_add,time_buf[1]);		//年 
   \   00000012   9611               ADIW    R27:R26, 1
   \   00000014   911C               LD      R17, X
   \   00000016   9711               SBIW    R27:R26, 1
   \   00000018   E80C               LDI     R16, 140
   \   0000001A   ....               RCALL   ds1302_Write_Byte
    163          	ds1302_Write_Byte(ds1302_month_add,time_buf[2]);	//月 
   \   0000001C   9612               ADIW    R27:R26, 2
   \   0000001E   911C               LD      R17, X
   \   00000020   9712               SBIW    R27:R26, 2
   \   00000022   E808               LDI     R16, 136
   \   00000024   ....               RCALL   ds1302_Write_Byte
    164          	ds1302_Write_Byte(ds1302_date_add,time_buf[3]);		//日 
   \   00000026   9613               ADIW    R27:R26, 3
   \   00000028   911C               LD      R17, X
   \   0000002A   9713               SBIW    R27:R26, 3
   \   0000002C   E806               LDI     R16, 134
   \   0000002E   ....               RCALL   ds1302_Write_Byte
    165          	ds1302_Write_Byte(ds1302_day_add,time_buf[7]);		//周 
   \   00000030   9617               ADIW    R27:R26, 7
   \   00000032   911C               LD      R17, X
   \   00000034   9717               SBIW    R27:R26, 7
   \   00000036   E80A               LDI     R16, 138
   \   00000038   ....               RCALL   ds1302_Write_Byte
    166          	ds1302_Write_Byte(ds1302_hr_add,time_buf[4]);		//时 		24小时制
   \   0000003A   9614               ADIW    R27:R26, 4
   \   0000003C   911C               LD      R17, X
   \   0000003E   9714               SBIW    R27:R26, 4
   \   00000040   E804               LDI     R16, 132
   \   00000042   ....               RCALL   ds1302_Write_Byte
    167          	ds1302_Write_Byte(ds1302_min_add,time_buf[5]);		//分
   \   00000044   9615               ADIW    R27:R26, 5
   \   00000046   911C               LD      R17, X
   \   00000048   9715               SBIW    R27:R26, 5
   \   0000004A   E802               LDI     R16, 130
   \   0000004C   ....               RCALL   ds1302_Write_Byte
    168          	ds1302_Write_Byte(ds1302_sec_add,time_buf[6]);		//秒
   \   0000004E   9616               ADIW    R27:R26, 6
   \   00000050   911C               LD      R17, X
   \   00000052   9716               SBIW    R27:R26, 6
   \   00000054   E800               LDI     R16, 128
   \   00000056   ....               RCALL   ds1302_Write_Byte
    169          	ds1302_Write_Byte(ds1302_day_add,time_buf[7]);		//周 
   \   00000058   9617               ADIW    R27:R26, 7
   \   0000005A   911C               LD      R17, X
   \   0000005C   9717               SBIW    R27:R26, 7
   \   0000005E   E80A               LDI     R16, 138
   \   00000060   ....               RCALL   ds1302_Write_Byte
    170          	ds1302_Write_Byte(ds1302_control_add,0x80);			//打开写保护 
   \   00000062   E810               LDI     R17, 128
   \   00000064   E80E               LDI     R16, 142
   \   00000066   ....               RCALL   ds1302_Write_Byte
    171          
    172          }
   \   00000068   91A9               LD      R26, Y+
   \   0000006A   91B9               LD      R27, Y+
   \   0000006C   9508               RET
    173          
    174          
    175          /**************************************************
    176          **read time from ds1302 
    177          **************************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    178          unsigned char * ds1302_Read_Time(unsigned char * time_buf)
   \                     ds1302_Read_Time:
    179          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
    180          	unsigned char i =0,tmp[2] = {'\0'};
   \   00000006   2444               CLR     R4
   \   00000008   ....               LDI     R30, LOW(`?<Constant {0}>`)
   \   0000000A   ....               LDI     R31, HIGH(`?<Constant {0}>`)
   \   0000000C   ....               LDI     R19, (`?<Constant {0}>`) >> 16
   \   0000000E   BF3B               OUT     0x3B, R19
   \   00000010   9187               ELPM    R24, Z+
   \   00000012   9196               ELPM    R25, Z
   \   00000014   9731               SBIW    R31:R30, 1
    181          	
    182          	time_buf[1]=ds1302_Read_Byte(ds1302_year_add);		//年 
   \   00000016   E80C               LDI     R16, 140
   \   00000018   ....               RCALL   ds1302_Read_Byte
   \   0000001A   01FD               MOVW    R31:R30, R27:R26
   \   0000001C   8301               STD     Z+1, R16
    183          	time_buf[2]=ds1302_Read_Byte(ds1302_month_add);		//月 
   \   0000001E   E808               LDI     R16, 136
   \   00000020   ....               RCALL   ds1302_Read_Byte
   \   00000022   01FD               MOVW    R31:R30, R27:R26
   \   00000024   8302               STD     Z+2, R16
    184          	time_buf[3]=ds1302_Read_Byte(ds1302_date_add);		//日 
   \   00000026   E806               LDI     R16, 134
   \   00000028   ....               RCALL   ds1302_Read_Byte
   \   0000002A   01FD               MOVW    R31:R30, R27:R26
   \   0000002C   8303               STD     Z+3, R16
    185          	time_buf[4]=ds1302_Read_Byte(ds1302_hr_add);		//时 
   \   0000002E   E804               LDI     R16, 132
   \   00000030   ....               RCALL   ds1302_Read_Byte
   \   00000032   01FD               MOVW    R31:R30, R27:R26
   \   00000034   8304               STD     Z+4, R16
    186          	time_buf[5]=ds1302_Read_Byte(ds1302_min_add);		//分 
   \   00000036   E802               LDI     R16, 130
   \   00000038   ....               RCALL   ds1302_Read_Byte
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   8305               STD     Z+5, R16
    187          	time_buf[6]=(ds1302_Read_Byte(ds1302_sec_add)) & 0x7F;//秒 
   \   0000003E   E800               LDI     R16, 128
   \   00000040   ....               RCALL   ds1302_Read_Byte
   \   00000042   770F               ANDI    R16, 0x7F
   \   00000044   01FD               MOVW    R31:R30, R27:R26
   \   00000046   8306               STD     Z+6, R16
    188          	time_buf[7]=ds1302_Read_Byte(ds1302_day_add);		//周 
   \   00000048   E80A               LDI     R16, 138
   \   0000004A   ....               RCALL   ds1302_Read_Byte
   \   0000004C   01FD               MOVW    R31:R30, R27:R26
   \   0000004E   8307               STD     Z+7, R16
    189          	
    190          	//make HEX array to decimal array ，you can just print it as %d
    191          	for(i = 1; i < 8; i++)
   \   00000050   2444               CLR     R4
   \   00000052   9443               INC     R4
   \                     ??ds1302_Read_Time_0:
   \   00000054   E008               LDI     R16, 8
   \   00000056   1640               CP      R4, R16
   \   00000058   F4E0               BRCC    ??ds1302_Read_Time_1
    192          	{
    193          		tmp[0] = time_buf[i] / 16;		//十位
   \   0000005A   2455               CLR     R5
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   0DE4               ADD     R30, R4
   \   00000060   1DF5               ADC     R31, R5
   \   00000062   8100               LD      R16, Z
   \   00000064   E140               LDI     R20, 16
   \   00000066   ........           CALL    ?UC_DIVMOD_L01
   \   0000006A   2F80               MOV     R24, R16
    194          		tmp[1] = time_buf[i] % 16;		//个位
   \   0000006C   2455               CLR     R5
   \   0000006E   01FD               MOVW    R31:R30, R27:R26
   \   00000070   0DE4               ADD     R30, R4
   \   00000072   1DF5               ADC     R31, R5
   \   00000074   8100               LD      R16, Z
   \   00000076   E140               LDI     R20, 16
   \   00000078   ........           CALL    ?UC_DIVMOD_L01
   \   0000007C   2F94               MOV     R25, R20
    195          		time_buf[i] = tmp[0] * 10 + tmp[1];
   \   0000007E   E00A               LDI     R16, 10
   \   00000080   9F80               MUL     R24, R16
   \   00000082   0E09               ADD     R0, R25
   \   00000084   2455               CLR     R5
   \   00000086   01FD               MOVW    R31:R30, R27:R26
   \   00000088   0DE4               ADD     R30, R4
   \   0000008A   1DF5               ADC     R31, R5
   \   0000008C   8200               ST      Z, R0
    196          	}
   \   0000008E   9443               INC     R4
   \   00000090   CFE1               RJMP    ??ds1302_Read_Time_0
    197          	return time_buf;
   \                     ??ds1302_Read_Time_1:
   \   00000092   018D               MOVW    R17:R16, R27:R26
   \   00000094   E0E6               LDI     R30, 6
   \   00000096   ........           JMP     ?EPILOGUE_B6_L09
    198          }
    199          
    200          
    201          /**********************************************
    202          **write check flag to ds1302
    203          **********************************************/

   \                                 In  segment CODE, align 2, keep-with-next
    204          void ds1302_Write_Check(unsigned char check)
   \                     ds1302_Write_Check:
    205          {
   \   00000000   938A               ST      -Y, R24
   \   00000002   2F80               MOV     R24, R16
    206          	ds1302_Write_Byte(ds1302_control_add,0x00);			//关闭写保护 
   \   00000004   E010               LDI     R17, 0
   \   00000006   E80E               LDI     R16, 142
   \   00000008   ....               RCALL   ds1302_Write_Byte
    207          	ds1302_Write_Byte(ds1302_check_add,check);
   \   0000000A   2F18               MOV     R17, R24
   \   0000000C   EC00               LDI     R16, 192
   \   0000000E   ....               RCALL   ds1302_Write_Byte
    208          	ds1302_Write_Byte(ds1302_control_add,0x80);			//打开写保护 
   \   00000010   E810               LDI     R17, 128
   \   00000012   E80E               LDI     R16, 142
   \   00000014   ....               RCALL   ds1302_Write_Byte
    209          }
   \   00000016   9189               LD      R24, Y+
   \   00000018   9508               RET
    210          
    211          
    212          
    213          /*********************************
    214          **DS1302测试函数	，读取时间通过串口一秒发送一次
    215          *********************************/

   \                                 In  segment CODE, align 2, keep-with-next
    216          void DS1302_Test(void)
   \                     DS1302_Test:
    217          {
   \   00000000   9728               SBIW    R29:R28, 8
    218          	unsigned char time_buf[8] = {0x20,'\0'};
   \   00000002   01BE               MOVW    R23:R22, R29:R28
   \   00000004   ....               LDI     R30, LOW(`?<Constant {32, 0}>`)
   \   00000006   ....               LDI     R31, HIGH(`?<Constant {32, 0}>`)
   \   00000008   ....               LDI     R19, (`?<Constant {32, 0}>`) >> 16
   \   0000000A   018B               MOVW    R17:R16, R23:R22
   \   0000000C   E048               LDI     R20, 8
   \   0000000E   E050               LDI     R21, 0
   \   00000010   ........           CALL    ?ML_FLASH_SRAM_24EC_16_L07
    219          	//count在ISR文件中定义
    220          	if(count == 100)		//100*10ms = 1s  //定时器1直接定时1s
   \   00000014   9100....           LDS     R16, count
   \   00000018   9110....           LDS     R17, (count + 1)
   \   0000001C   3604               CPI     R16, 100
   \   0000001E   E020               LDI     R18, 0
   \   00000020   0712               CPC     R17, R18
   \   00000022   F529               BRNE    ??DS1302_Test_0
    221          	{
    222          		count = 0;
   \   00000024   E000               LDI     R16, 0
   \   00000026   E010               LDI     R17, 0
   \   00000028   9300....           STS     count, R16
   \   0000002C   9310....           STS     (count + 1), R17
    223          		ds1302_Read_Time(time_buf);
   \   00000030   018E               MOVW    R17:R16, R29:R28
   \   00000032   ....               RCALL   ds1302_Read_Time
    224          		//按照yyyy-MM-dd hh24:mi:ss的格式串口输出
    225          		printf("20%02d-%02d-%02d %02d:%02d:%02d\r",\
    226          			time_buf[1],time_buf[2],time_buf[3],time_buf[4],time_buf[5],time_buf[6]);
   \   00000034   810E               LDD     R16, Y+6
   \   00000036   E010               LDI     R17, 0
   \   00000038   931A               ST      -Y, R17
   \   0000003A   930A               ST      -Y, R16
   \   0000003C   810F               LDD     R16, Y+7
   \   0000003E   E010               LDI     R17, 0
   \   00000040   931A               ST      -Y, R17
   \   00000042   930A               ST      -Y, R16
   \   00000044   8508               LDD     R16, Y+8
   \   00000046   E010               LDI     R17, 0
   \   00000048   931A               ST      -Y, R17
   \   0000004A   930A               ST      -Y, R16
   \   0000004C   8509               LDD     R16, Y+9
   \   0000004E   E010               LDI     R17, 0
   \   00000050   931A               ST      -Y, R17
   \   00000052   930A               ST      -Y, R16
   \   00000054   850A               LDD     R16, Y+10
   \   00000056   E010               LDI     R17, 0
   \   00000058   931A               ST      -Y, R17
   \   0000005A   930A               ST      -Y, R16
   \   0000005C   850B               LDD     R16, Y+11
   \   0000005E   E010               LDI     R17, 0
   \   00000060   931A               ST      -Y, R17
   \   00000062   930A               ST      -Y, R16
   \   00000064   ....               LDI     R16, LOW(`?<Constant "20%02d-%02d-%02d %02d...">`)
   \   00000066   ....               LDI     R17, (`?<Constant "20%02d-%02d-%02d %02d...">`) >> 8
   \   00000068   ........           CALL    printf
   \   0000006C   962C               ADIW    R29:R28, 12
    227          	}
    228          
    229          }
   \                     ??DS1302_Test_0:
   \   0000006E   9628               ADIW    R29:R28, 8
   \   00000070   9508               RET

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "20%02d-%02d-%02d `:
   \   00000000   303230256432       DC8 "20%02d-%02d-%02d %02d:%02d:%02d\015"
   \              252D32302D64
   \              302564322520
   \              32303A643025
   \              6432253A3230
   \              0D6400      

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "20%02d-%02d-%02d %02d...">`:
   \   00000000                      DS8 33
   \   00000021                      REQUIRE `?<Initializer for <Constant "20%02d-%02d-%02d `

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {32, 22, 8, 18, 8, 68, 80, 2}>`:
   \   00000000   162012084408       DC8 32, 22, 8, 18, 8, 68, 80, 2
   \              0250        

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0000               DC8 0, 0

   \                                 In  segment FAR_F, align 1, keep-with-next
   \                     `?<Constant {32, 0}>`:
   \   00000000   002000000000       DC8 32, 0, 0, 0, 0, 0, 0, 0
   \              0000        

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     20      4   DS1302_Test
        8      2   -> ds1302_Read_Time
       20      2   -> printf
      9      4   ds1302_Init
        9      2   -> ds1302_Read_Byte
        9      2   -> ds1302_Write_Check
        9      2   -> ds1302_Write_Time
      0      2   ds1302_Read_Byte
      6      4   ds1302_Read_Time
        6      2   -> ds1302_Read_Byte
      0      2   ds1302_Write_Byte
      1      2   ds1302_Write_Check
        1      2   -> ds1302_Write_Byte
      2      2   ds1302_Write_Time
        2      2   -> ds1302_Write_Byte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      33  ?<Constant "20%02d-%02d-%02d %02d...">
       2  ?<Constant {0}>
       8  ?<Constant {32, 0}>
       8  ?<Constant {32, 22, 8, 18, 8, 68, 80, 2}>
      33  ?<Initializer for <Constant "20%02d-%02d-%02d
     114  DS1302_Test
       1  _A_DDRE
       1  _A_PINE
       1  _A_PORTE
      54  ds1302_Init
      78  ds1302_Read_Byte
     154  ds1302_Read_Time
      66  ds1302_Write_Byte
      26  ds1302_Write_Check
     110  ds1302_Write_Time
       7  -- Other

 
   3 bytes in segment ABSOLUTE
 602 bytes in segment CODE
  18 bytes in segment FAR_F
   7 bytes in segment INITTAB
  33 bytes in segment NEAR_I
  33 bytes in segment NEAR_ID
 
 653 bytes of CODE memory (+ 7 bytes shared)
  33 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
