###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.20.2.50573 for Atmel AVR        12/Sep/2016  16:06:11 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Admin\Desktop\ATmega128Project\src\ds18b20.c    #
#    Command line =  C:\Users\Admin\Desktop\ATmega128Project\src\ds18b20.c    #
#                    --cpu=m128a -ms -o C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\Obj\ -lCN C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -lb C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -y --initializers_in_flash --no_cse       #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Admin\Desktop\ATmega128Project\inc\             #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Admin\Desktop\ATmega128Project\Debug\List\ds18b #
#                    20.lst                                                   #
#    Object file  =  C:\Users\Admin\Desktop\ATmega128Project\Debug\Obj\ds18b2 #
#                    0.r90                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Admin\Desktop\ATmega128Project\src\ds18b20.c
      1          /*DS18B20连接在芯片的PE4管脚*/
      2          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x21
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1
      3          #include <stdbool.h>
      4          #include "delay.h"
      5          #include "ds18b20.h"
      6          
      7          /*DS18B20初始化，检测18B20是否存在*/

   \                                 In  segment CODE, align 2, keep-with-next
      8          unsigned int DS18B20_Init(void)
   \                     DS18B20_Init:
      9          {
     10          	unsigned char i;
     11          	DQ_OUT;				//配置单总线PE4为输出模式
   \   00000000   9A14               SBI     0x02, 0x04
     12          	/*控制器发送复位脉冲 480us - 960us */
     13          	DQ_CLR;				//将DQ清0，发送复位脉冲，保持480us到960us之间
   \   00000002   981C               CBI     0x03, 0x04
     14          	_delay_us(500);		//延时500us
   \   00000004   E909               LDI     R16, 153
   \   00000006   E013               LDI     R17, 3
   \   00000008   5001               SUBI    R16, 1
   \   0000000A   4010               SBCI    R17, 0
   \   0000000C   F7E9               BRNE    $-4
   \   0000000E   0000               NOP
     15          	DQ_SET;				//将DQ置1
   \   00000010   9A1C               SBI     0x03, 0x04
     16          	DQ_IN;				//配置总线PE4位输入模式,利用下边的延时从输出转换到输入模式
   \   00000012   9814               CBI     0x02, 0x04
     17          	_delay_us(50);		//15-60us之后，接收DS18B20的存在脉冲
   \   00000014   E70A               LDI     R16, 122
   \   00000016   950A               DEC     R16
   \   00000018   F7F1               BRNE    $-2
   \   0000001A   C000               RJMP    $+2
     18          	/*控制器接收存在脉冲  60us - 240us*/
     19          	i = DQ_R;			//读取存在脉冲
   \   0000001C   B101               IN      R16, 0x01
   \   0000001E   7100               ANDI    R16, 0x10
   \   00000020   2F20               MOV     R18, R16
     20          	_delay_us(500);		//延时450us,接收保持大于480us		
   \   00000022   E909               LDI     R16, 153
   \   00000024   E013               LDI     R17, 3
   \   00000026   5001               SUBI    R16, 1
   \   00000028   4010               SBCI    R17, 0
   \   0000002A   F7E9               BRNE    $-4
   \   0000002C   0000               NOP
     21          	
     22          	if(!i)
   \   0000002E   2322               TST     R18
   \   00000030   F419               BRNE    ??DS18B20_Init_0
     23          	{
     24          		return 1;		//如果DQ_R存在脉冲为低电平，则DS18B20已准备就绪
   \   00000032   E001               LDI     R16, 1
   \   00000034   E010               LDI     R17, 0
   \   00000036   9508               RET
     25          	}
     26          	else 
     27          	{
     28          		return 0;		//否则DS18B20不存在，没准备好
   \                     ??DS18B20_Init_0:
   \   00000038   E000               LDI     R16, 0
   \   0000003A   E010               LDI     R17, 0
   \   0000003C   9508               RET
   \   0000003E                      REQUIRE _A_DDRE
   \   0000003E                      REQUIRE _A_PORTE
   \   0000003E                      REQUIRE _A_PINE
     29          	}
     30          }
     31          
     32          /*从DS18B20中读取一个字节*/

   \                                 In  segment CODE, align 2, keep-with-next
     33          unsigned char ds18b20_read_byte(void)
   \                     ds18b20_read_byte:
     34          {
     35          	unsigned char i;
     36          	unsigned char dat = 0;
   \   00000000   E000               LDI     R16, 0
     37          	
     38          	//循环八次，读取一个字节数据
     39          	for(i = 8;i != 0;i--)
   \   00000002   E028               LDI     R18, 8
   \                     ??ds18b20_read_byte_0:
   \   00000004   2322               TST     R18
   \   00000006   F0B9               BREQ    ??ds18b20_read_byte_1
     40          	{
     41          		dat >>= 1;		//值右移一位
   \   00000008   9506               LSR     R16
     42          		
     43          		DQ_OUT;			//输出模式
   \   0000000A   9A14               SBI     0x02, 0x04
     44          		DQ_CLR;			//输出低电平
   \   0000000C   981C               CBI     0x03, 0x04
     45          		_delay_us(4);		
   \   0000000E   E019               LDI     R17, 9
   \   00000010   951A               DEC     R17
   \   00000012   F7F1               BRNE    $-2
   \   00000014   C000               RJMP    $+2
     46          		DQ_SET;			//拉高电平
   \   00000016   9A1C               SBI     0x03, 0x04
     47          		
     48          		DQ_IN;			//输入模式
   \   00000018   9814               CBI     0x02, 0x04
     49          		_delay_us(10);	//延时10us
   \   0000001A   E118               LDI     R17, 24
   \   0000001C   951A               DEC     R17
   \   0000001E   F7F1               BRNE    $-2
   \   00000020   0000               NOP
     50          		
     51          		if(DQ_R)		//如果PINE4为高电平，将dat的最高位置1。否则为0
   \   00000022   9B0C               SBIS    0x01, 0x04
   \   00000024   C002               RJMP    ??ds18b20_read_byte_2
     52          		{
     53          			dat |= 0x80;	
   \   00000026   6800               ORI     R16, 0x80
   \   00000028   E011               LDI     R17, 1
     54          		}
     55          		_delay_us(60);
   \                     ??ds18b20_read_byte_2:
   \   0000002A   E913               LDI     R17, 147
   \   0000002C   951A               DEC     R17
   \   0000002E   F7F1               BRNE    $-2
   \   00000030   0000               NOP
     56          	}
   \   00000032   952A               DEC     R18
   \   00000034   CFE7               RJMP    ??ds18b20_read_byte_0
     57          	return dat;
   \                     ??ds18b20_read_byte_1:
   \   00000036   9508               RET
   \   00000038                      REQUIRE _A_DDRE
   \   00000038                      REQUIRE _A_PORTE
   \   00000038                      REQUIRE _A_PINE
     58          }
     59          
     60          
     61          /*向DS18B20中写入一个字节的数据*/

   \                                 In  segment CODE, align 2, keep-with-next
     62          void ds18b20_write_byte(unsigned char dat)
   \                     ds18b20_write_byte:
     63          {
     64          	unsigned char i;
     65          	
     66          	for(i = 8; i != 0; i--)
   \   00000000   E018               LDI     R17, 8
   \                     ??ds18b20_write_byte_0:
   \   00000002   2311               TST     R17
   \   00000004   F089               BREQ    ??ds18b20_write_byte_1
     67          	{
     68          		DQ_OUT;			//配置为输出模式并输出低电平
   \   00000006   9A14               SBI     0x02, 0x04
     69          		DQ_CLR;
   \   00000008   981C               CBI     0x03, 0x04
     70          		_delay_us(4);
   \   0000000A   E029               LDI     R18, 9
   \   0000000C   952A               DEC     R18
   \   0000000E   F7F1               BRNE    $-2
   \   00000010   C000               RJMP    $+2
     71          		
     72          		if(dat & 0x01)	//如果dat的最低位为1，就拉高电平
   \   00000012   FB00               BST     R16, 0
   \   00000014   F40E               BRTC    ??ds18b20_write_byte_2
     73          		{
     74          			DQ_SET;
   \   00000016   9A1C               SBI     0x03, 0x04
     75          		}
     76          		
     77          		_delay_us(45);		//延时45us
   \                     ??ds18b20_write_byte_2:
   \   00000018   E62E               LDI     R18, 110
   \   0000001A   952A               DEC     R18
   \   0000001C   F7F1               BRNE    $-2
   \   0000001E   0000               NOP
     78          		
     79          		DQ_SET;			//位结束，无论输出的是0或1最后都要拉高电平
   \   00000020   9A1C               SBI     0x03, 0x04
     80          		dat >>= 1;		//要写入的数据dat右移一位
   \   00000022   9506               LSR     R16
     81          		
     82          	}
   \   00000024   951A               DEC     R17
   \   00000026   CFED               RJMP    ??ds18b20_write_byte_0
     83          }
   \                     ??ds18b20_write_byte_1:
   \   00000028   9508               RET
   \   0000002A                      REQUIRE _A_DDRE
   \   0000002A                      REQUIRE _A_PORTE
     84          
     85          
     86          /*从DS18B20中读取温度   0x44命令 */

   \                                 In  segment CODE, align 2, keep-with-next
     87          unsigned int ds18b20_read_temperature(void)
   \                     ds18b20_read_temperature:
     88          {
   \   00000000   ........           CALL    ?PROLOGUE6_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
     89          	unsigned char temp_low = 0;
   \   00000004   2444               CLR     R4
     90          	unsigned int temp = 0,i = 7;
   \   00000006   E0A0               LDI     R26, 0
   \   00000008   E0B0               LDI     R27, 0
   \   0000000A   E087               LDI     R24, 7
   \   0000000C   E090               LDI     R25, 0
     91          	//检测DS18B20是否存在，使其准备好并开始工作
     92          		
     93          		DS18B20_Init();
   \   0000000E   ....               RCALL   DS18B20_Init
     94          		//启动DS18B20温度转换
     95          		ds18b20_write_byte(0xCC);		//单总线共一个设备，忽略地址
   \   00000010   EC0C               LDI     R16, 204
   \   00000012   ....               RCALL   ds18b20_write_byte
     96          		ds18b20_write_byte(0x44);		//启动转换
   \   00000014   E404               LDI     R16, 68
   \   00000016   ....               RCALL   ds18b20_write_byte
     97          		_delay_us(10);					
   \   00000018   E108               LDI     R16, 24
   \   0000001A   950A               DEC     R16
   \   0000001C   F7F1               BRNE    $-2
   \   0000001E   0000               NOP
     98          		
     99          		DS18B20_Init();
   \   00000020   ....               RCALL   DS18B20_Init
    100          		//读取寄存器数据
    101          		ds18b20_write_byte(0xCC);		//忽略地址
   \   00000022   EC0C               LDI     R16, 204
   \   00000024   ....               RCALL   ds18b20_write_byte
    102          		ds18b20_write_byte(0xBE);		//读取温度寄存器，可读9个字节
   \   00000026   EB0E               LDI     R16, 190
   \   00000028   ....               RCALL   ds18b20_write_byte
    103          		
    104          		temp_low = ds18b20_read_byte();	//温度低字节
   \   0000002A   ....               RCALL   ds18b20_read_byte
   \   0000002C   2E40               MOV     R4, R16
    105          		temp	 = ds18b20_read_byte();	//温度高字节
   \   0000002E   ....               RCALL   ds18b20_read_byte
   \   00000030   E010               LDI     R17, 0
   \   00000032   01D8               MOVW    R27:R26, R17:R16
    106          		
    107          		while(i--)
   \                     ??ds18b20_read_temperature_0:
   \   00000034   018C               MOVW    R17:R16, R25:R24
   \   00000036   01C8               MOVW    R25:R24, R17:R16
   \   00000038   9701               SBIW    R25:R24, 1
   \   0000003A   2B01               OR      R16, R17
   \   0000003C   F011               BREQ    ??ds18b20_read_temperature_1
    108          		{
    109          			ds18b20_read_byte();		//将剩余的戚歌字节读出来
   \   0000003E   ....               RCALL   ds18b20_read_byte
   \   00000040   CFF9               RJMP    ??ds18b20_read_temperature_0
    110          		}
    111          			
    112          //		temp &= 0x01;
    113          		temp <<= 8;			//高字节左移八位
   \                     ??ds18b20_read_temperature_1:
   \   00000042   2FBA               MOV     R27, R26
   \   00000044   E0A0               LDI     R26, 0
    114          		temp  |= temp_low;	//高位和地位组合
   \   00000046   2455               CLR     R5
   \   00000048   29A4               OR      R26, R4
   \   0000004A   29B5               OR      R27, R5
    115          		return temp;
   \   0000004C   018D               MOVW    R17:R16, R27:R26
   \   0000004E   E0E6               LDI     R30, 6
   \   00000050   ........           JMP     ?EPILOGUE_B6_L09
    116          }
    117          
    118          
    119          
    120          
    121          
    122          
    123          
    124          
    125          
    126          
    127          
    128          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   DS18B20_Init
      0      2   ds18b20_read_byte
      6      2   ds18b20_read_temperature
        6      2   -> DS18B20_Init
        6      2   -> ds18b20_read_byte
        6      2   -> ds18b20_write_byte
      0      2   ds18b20_write_byte


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      62  DS18B20_Init
       1  _A_DDRE
       1  _A_PINE
       1  _A_PORTE
      56  ds18b20_read_byte
      84  ds18b20_read_temperature
      42  ds18b20_write_byte

 
   3 bytes in segment ABSOLUTE
 244 bytes in segment CODE
 
 244 bytes of CODE memory
   0 bytes of DATA memory (+ 3 bytes shared)

Errors: none
Warnings: none
