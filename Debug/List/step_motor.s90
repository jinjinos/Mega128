///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR       20/Sep/2016  17:32:33 /
// Copyright 1996-2013 IAR Systems AB.                                        /
//                                                                            /
//    Source file  =  C:\Users\Administrator\Desktop\ATmega128Project\src\ste /
//                    p_motor.c                                               /
//    Command line =  C:\Users\Administrator\Desktop\ATmega128Project\src\ste /
//                    p_motor.c --cpu=m128a -ms -o                            /
//                    C:\Users\Administrator\Desktop\ATmega128Project\Debug\O /
//                    bj\ -lCN C:\Users\Administrator\Desktop\ATmega128Projec /
//                    t\Debug\List\ -lb C:\Users\Administrator\Desktop\ATmega /
//                    128Project\Debug\List\ -y --initializers_in_flash       /
//                    --no_cse --no_inline --no_code_motion --no_cross_call   /
//                    --no_clustering --no_tbaa --debug                       /
//                    -DENABLE_BIT_DEFINITIONS -e -I                          /
//                    C:\Users\Administrator\Desktop\ATmega128Project\inc\    /
//                    --eeprom_size 4096 --dlib --dlib_config "D:\Program     /
//                    Files (x86)\IAR Systems\Embedded Workbench              /
//                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla             /
//                    --use_c++_inline -On                                    /
//    List file    =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\L /
//                    ist\step_motor.s90                                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME step_motor

        RSEG CSTACK:DATA:NOROOT(0)
        RSEG RSTACK:DATA:NOROOT(0)

        EXTERN ?EPILOGUE_B4_L09
        EXTERN ?PROLOGUE4_L09
        EXTERN ?need_segment_init

        PUBWEAK `?<Segment init: NEAR_I>`
        PUBLIC B_Rotation
        PUBLIC F_Rotation
        PUBWEAK _A_DDRB
        PUBWEAK _A_PORTB
        PUBWEAK __?EEARH
        PUBWEAK __?EEARL
        PUBWEAK __?EECR
        PUBWEAK __?EEDR
        PUBLIC stepMotorBackward
        PUBLIC stepMotorForeward
        PUBLIC stepMotorInit


        ASEGN ABSOLUTE:DATA:NOROOT,037H
// union <unnamed> volatile __io _A_DDRB
_A_DDRB:
        DS8 1

        ASEGN ABSOLUTE:DATA:NOROOT,038H
// union <unnamed> volatile __io _A_PORTB
_A_PORTB:
        DS8 1

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
F_Rotation:
        DS8 8
        REQUIRE `?<Initializer for F_Rotation>`

        RSEG NEAR_I:DATA:NOROOT(0)
        REQUIRE `?<Segment init: NEAR_I>`
B_Rotation:
        DS8 8
        REQUIRE `?<Initializer for B_Rotation>`

        RSEG CODE:CODE:NOROOT(1)
stepMotorInit:
        IN      R16, 0x17
        ORI     R16, 0x1E
        OUT     0x17, R16
        IN      R16, 0x18
        ANDI    R16, 0xE1
        OUT     0x18, R16
        RET
        REQUIRE _A_DDRB
        REQUIRE _A_PORTB

        RSEG CODE:CODE:NOROOT(1)
stepMotorForeward:
        CALL    ?PROLOGUE4_L09
        LDI     R26, 0
        LDI     R27, 0
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
??stepMotorForeward_0:
        CPI     R26, 0
        LDI     R16, 2
        CPC     R27, R16
        BRCC    ??stepMotorForeward_1
        LDI     R24, 0
        LDI     R25, 0
??stepMotorForeward_2:
        CPI     R24, 8
        LDI     R16, 0
        CPC     R25, R16
        BRCC    ??stepMotorForeward_3
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(F_Rotation) & 0xFFFF))
        SBCI    R31, (-(F_Rotation) & 0xFFFF) >> 8
        LD      R16, Z
        OUT     0x18, R16
        LDI     R16, 255
        LDI     R17, 71
        SUBI    R16, 1
        SBCI    R17, 0
        BRNE    $-4
        RJMP    $+2
        NOP
        ADIW    R25:R24, 1
        RJMP    ??stepMotorForeward_2
??stepMotorForeward_3:
        ADIW    R27:R26, 1
        RJMP    ??stepMotorForeward_0
??stepMotorForeward_1:
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        REQUIRE _A_PORTB

        RSEG CODE:CODE:NOROOT(1)
stepMotorBackward:
        CALL    ?PROLOGUE4_L09
        LDI     R24, 0
        LDI     R25, 0
        LDI     R26, 0
        LDI     R27, 0
        LDI     R26, 0
        LDI     R27, 0
??stepMotorBackward_0:
        CPI     R26, 0
        LDI     R16, 2
        CPC     R27, R16
        BRCC    ??stepMotorBackward_1
        LDI     R24, 0
        LDI     R25, 0
??stepMotorBackward_2:
        CPI     R24, 8
        LDI     R16, 0
        CPC     R25, R16
        BRCC    ??stepMotorBackward_3
        MOVW    R31:R30, R25:R24
        SUBI    R30, LOW((-(B_Rotation) & 0xFFFF))
        SBCI    R31, (-(B_Rotation) & 0xFFFF) >> 8
        LD      R16, Z
        OUT     0x18, R16
        LDI     R16, 255
        LDI     R17, 71
        SUBI    R16, 1
        SBCI    R17, 0
        BRNE    $-4
        RJMP    $+2
        NOP
        ADIW    R25:R24, 1
        RJMP    ??stepMotorBackward_2
??stepMotorBackward_3:
        ADIW    R27:R26, 1
        RJMP    ??stepMotorBackward_0
??stepMotorBackward_1:
        LDI     R30, 4
        JMP     ?EPILOGUE_B4_L09
        REQUIRE _A_PORTB

        ASEGN ABSOLUTE:DATA:NOROOT,01cH
__?EECR:

        ASEGN ABSOLUTE:DATA:NOROOT,01dH
__?EEDR:

        ASEGN ABSOLUTE:DATA:NOROOT,01eH
__?EEARL:

        ASEGN ABSOLUTE:DATA:NOROOT,01fH
__?EEARH:

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for F_Rotation>`:
        DC8 226, 230, 228, 236, 232, 248, 240, 242

        RSEG INITTAB:CODE:NOROOT(0)
`?<Segment init: NEAR_I>`:
        DC16    SFE(NEAR_I) - SFB(NEAR_I)
        DC16    SFB(NEAR_I)
        DP      SFB(NEAR_ID)
        REQUIRE ?need_segment_init

        RSEG NEAR_ID:CODE:NOROOT(0)
`?<Initializer for B_Rotation>`:
        DC8 242, 240, 248, 232, 236, 228, 230, 226

        END
// 
//   2 bytes in segment ABSOLUTE
// 162 bytes in segment CODE
//   7 bytes in segment INITTAB
//  16 bytes in segment NEAR_I
//  16 bytes in segment NEAR_ID
// 
// 178 bytes of CODE memory (+ 7 bytes shared)
//  16 bytes of DATA memory (+ 2 bytes shared)
//
//Errors: none
//Warnings: none
