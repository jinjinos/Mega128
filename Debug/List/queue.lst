###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.20.2.50573 for Atmel AVR        12/Sep/2016  16:06:12 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Admin\Desktop\ATmega128Project\src\queue.c      #
#    Command line =  C:\Users\Admin\Desktop\ATmega128Project\src\queue.c      #
#                    --cpu=m128a -ms -o C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\Obj\ -lCN C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -lb C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -y --initializers_in_flash --no_cse       #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Admin\Desktop\ATmega128Project\inc\             #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Admin\Desktop\ATmega128Project\Debug\List\queue #
#                    .lst                                                     #
#    Object file  =  C:\Users\Admin\Desktop\ATmega128Project\Debug\Obj\queue. #
#                    r90                                                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Admin\Desktop\ATmega128Project\src\queue.c
      1          /**消息队列的实现，用于接收串口的字符串**/
      2          #include <stdio.h>
      3          #include <stdbool.h>
      4          
      5          #include "queue.h"
      6          
      7          //messageQueue receiveMsg;
      8          
      9          //队列的初始化

   \                                 In  segment CODE, align 2, keep-with-next
     10          void msgQueueInit(messageQueue * receiveMsg)		
   \                     msgQueueInit:
     11          {
     12          	receiveMsg->pIn = &receiveMsg->mText[0];
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   5F2C               SUBI    R18, 252
   \   00000004   4F3F               SBCI    R19, 255
   \   00000006   01F8               MOVW    R31:R30, R17:R16
   \   00000008   8320               ST      Z, R18
   \   0000000A   8331               STD     Z+1, R19
     13          	receiveMsg->pOut = &receiveMsg->mText[0];
   \   0000000C   0198               MOVW    R19:R18, R17:R16
   \   0000000E   5F2C               SUBI    R18, 252
   \   00000010   4F3F               SBCI    R19, 255
   \   00000012   01F8               MOVW    R31:R30, R17:R16
   \   00000014   8322               STD     Z+2, R18
   \   00000016   8333               STD     Z+3, R19
     14          	receiveMsg->mNum = 0;
   \   00000018   E020               LDI     R18, 0
   \   0000001A   01F8               MOVW    R31:R30, R17:R16
   \   0000001C   AB26               STD     Z+54, R18
     15          }
   \   0000001E   9508               RET
     16          
     17          //入队

   \                                 In  segment CODE, align 2, keep-with-next
     18          bool msgQueueIn(messageQueue * receiveMsg,char data)
   \                     msgQueueIn:
     19          {
   \   00000000   01BD               MOVW    R23:R22, R27:R26
   \   00000002   01F8               MOVW    R31:R30, R17:R16
     20          	//如果队列已满，则入队失败
     21          	if(MSG_Q_IS_FULL(receiveMsg))
   \   00000004   A906               LDD     R16, Z+54
   \   00000006   3302               CPI     R16, 50
   \   00000008   F010               BRCS    ??msgQueueIn_0
     22          	{
     23          		return false;
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   C01B               RJMP    ??msgQueueIn_1
     24          	}
     25          	else
     26          	{
     27          		* (receiveMsg->pIn) = data;
   \                     ??msgQueueIn_0:
   \   0000000E   81A0               LD      R26, Z
   \   00000010   81B1               LDD     R27, Z+1
   \   00000012   932C               ST      X, R18
     28          		//如果入队指针pIn指向末尾，就从头开始
     29          		if(receiveMsg->pIn == &receiveMsg->mText[BUFFER_SIZE - 1])
   \   00000014   8140               LD      R20, Z
   \   00000016   8151               LDD     R21, Z+1
   \   00000018   018F               MOVW    R17:R16, R31:R30
   \   0000001A   5C0B               SUBI    R16, 203
   \   0000001C   4F1F               SBCI    R17, 255
   \   0000001E   1740               CP      R20, R16
   \   00000020   0751               CPC     R21, R17
   \   00000022   F431               BRNE    ??msgQueueIn_2
     30          		{
     31          			receiveMsg->pIn = &receiveMsg->mText[0];
   \   00000024   018F               MOVW    R17:R16, R31:R30
   \   00000026   5F0C               SUBI    R16, 252
   \   00000028   4F1F               SBCI    R17, 255
   \   0000002A   8300               ST      Z, R16
   \   0000002C   8311               STD     Z+1, R17
   \   0000002E   C006               RJMP    ??msgQueueIn_3
     32          		}
     33          		else	//否则pIn自加1
     34          		{
     35          			receiveMsg->pIn++;
   \                     ??msgQueueIn_2:
   \   00000030   8100               LD      R16, Z
   \   00000032   8111               LDD     R17, Z+1
   \   00000034   5F0F               SUBI    R16, 255
   \   00000036   4F1F               SBCI    R17, 255
   \   00000038   8300               ST      Z, R16
   \   0000003A   8311               STD     Z+1, R17
     36          		}
     37          		receiveMsg->mNum++;
   \                     ??msgQueueIn_3:
   \   0000003C   A906               LDD     R16, Z+54
   \   0000003E   9503               INC     R16
   \   00000040   AB06               STD     Z+54, R16
     38          		return true;
   \   00000042   E001               LDI     R16, 1
   \                     ??msgQueueIn_1:
   \   00000044   01DB               MOVW    R27:R26, R23:R22
   \   00000046   9508               RET
     39          	}
     40          }
     41          
     42          //出队

   \                                 In  segment CODE, align 2, keep-with-next
     43          char msgQueueOut(messageQueue * receiveMsg)
   \                     msgQueueOut:
     44          {
   \   00000000   2F3B               MOV     R19, R27
   \   00000002   2F6A               MOV     R22, R26
   \   00000004   01F8               MOVW    R31:R30, R17:R16
     45          	char ret;
     46          	//如果队列已空，则出队失败
     47          	if(MSG_Q_IS_EMPTY(receiveMsg))
   \   00000006   A906               LDD     R16, Z+54
   \   00000008   2300               TST     R16
   \   0000000A   F411               BRNE    ??msgQueueOut_0
     48          	{
     49          		return NULL;
   \   0000000C   E000               LDI     R16, 0
   \   0000000E   C01C               RJMP    ??msgQueueOut_1
     50          	}
     51          	else
     52          	{
     53          		ret = *(receiveMsg->pOut);
   \                     ??msgQueueOut_0:
   \   00000010   81A2               LDD     R26, Z+2
   \   00000012   81B3               LDD     R27, Z+3
   \   00000014   910C               LD      R16, X
   \   00000016   2F20               MOV     R18, R16
     54          		//如果出队指针pOut指向末尾，就从头开始
     55          		if(receiveMsg->pOut == &(receiveMsg->mText[BUFFER_SIZE - 1]))
   \   00000018   8142               LDD     R20, Z+2
   \   0000001A   8153               LDD     R21, Z+3
   \   0000001C   018F               MOVW    R17:R16, R31:R30
   \   0000001E   5C0B               SUBI    R16, 203
   \   00000020   4F1F               SBCI    R17, 255
   \   00000022   1740               CP      R20, R16
   \   00000024   0751               CPC     R21, R17
   \   00000026   F431               BRNE    ??msgQueueOut_2
     56          		{
     57          			receiveMsg->pOut = &(receiveMsg->mText[0]);
   \   00000028   018F               MOVW    R17:R16, R31:R30
   \   0000002A   5F0C               SUBI    R16, 252
   \   0000002C   4F1F               SBCI    R17, 255
   \   0000002E   8302               STD     Z+2, R16
   \   00000030   8313               STD     Z+3, R17
   \   00000032   C006               RJMP    ??msgQueueOut_3
     58          		}
     59          		else	//否则pOut自加1
     60          		{
     61          			receiveMsg->pOut++;
   \                     ??msgQueueOut_2:
   \   00000034   8102               LDD     R16, Z+2
   \   00000036   8113               LDD     R17, Z+3
   \   00000038   5F0F               SUBI    R16, 255
   \   0000003A   4F1F               SBCI    R17, 255
   \   0000003C   8302               STD     Z+2, R16
   \   0000003E   8313               STD     Z+3, R17
     62          		}
     63          		receiveMsg->mNum--;
   \                     ??msgQueueOut_3:
   \   00000040   A906               LDD     R16, Z+54
   \   00000042   950A               DEC     R16
   \   00000044   AB06               STD     Z+54, R16
     64          		return ret;
   \   00000046   2F02               MOV     R16, R18
   \                     ??msgQueueOut_1:
   \   00000048   2FA6               MOV     R26, R22
   \   0000004A   2FB3               MOV     R27, R19
   \   0000004C   9508               RET
     65          	}	
     66          }
     67          

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   msgQueueIn
      2   msgQueueInit
      2   msgQueueOut


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      72  msgQueueIn
      32  msgQueueInit
      78  msgQueueOut

 
 182 bytes in segment CODE
 
 182 bytes of CODE memory

Errors: none
Warnings: none
