###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.20.2.50573 for Atmel AVR        12/Sep/2016  16:06:30 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Admin\Desktop\ATmega128Project\src\spi.c        #
#    Command line =  C:\Users\Admin\Desktop\ATmega128Project\src\spi.c        #
#                    --cpu=m128a -ms -o C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\Obj\ -lCN C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -lb C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -y --initializers_in_flash --no_cse       #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Admin\Desktop\ATmega128Project\inc\             #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Admin\Desktop\ATmega128Project\Debug\List\spi.l #
#                    st                                                       #
#    Object file  =  C:\Users\Admin\Desktop\ATmega128Project\Debug\Obj\spi.r9 #
#                    0                                                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Admin\Desktop\ATmega128Project\src\spi.c
      1          /* ATmega128芯片 SPI的驱动文件*/
      2          
      3          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
      4          #include <RegBit.h>
      5          /***********************************************************************
      6          函数功能：SPI初始化
      7          操作内容：1、设置端口输入输出属性
      8          		  2、设置SPI接口相关寄存器
      9                    3、支持常用AVR单片机接口，兼容性增强，可扩展
     10          ***********************************************************************/
     11          //PB0 - PB3 SS SCK MOSI MISO

   \                                 In  segment CODE, align 2, keep-with-next
     12          void SPI_Init(void)
   \                     SPI_Init:
     13          {
     14          	PORTB |= (1 << PB1);	//设置SCK为1
   \   00000000   9AC1               SBI     0x18, 0x01
     15          	DDRB  |= (1 << DDB1);	//设置SCK为输出模式
   \   00000002   9AB9               SBI     0x17, 0x01
     16          	DDRB  &=~(1 << DDB3);	//设置MISO为输入模式
   \   00000004   98BB               CBI     0x17, 0x03
     17          	DDRB  |= (1 << DDB2);	//设置MOSI为输出模式
   \   00000006   9ABA               SBI     0x17, 0x02
     18          	DDRB  |= (1 << DDB0);	//主机模式下，设置SS为输出，从机的片选
   \   00000008   9AB8               SBI     0x17, 0x00
     19          	
     20          	PORTB |= (1 << DDB0);	//SS置高电平，片选无效
   \   0000000A   9AC0               SBI     0x18, 0x00
     21          	
     22          //	SPCR = 
     23          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_PORTB
   \   0000000E                      REQUIRE _A_DDRB

   Maximum stack usage in bytes:

   RSTACK Function
   ------ --------
      2   SPI_Init


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      14  SPI_Init
       1  _A_DDRB
       1  _A_PORTB

 
  2 bytes in segment ABSOLUTE
 14 bytes in segment CODE
 
 14 bytes of CODE memory
  0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
