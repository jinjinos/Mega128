###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR        20/Sep/2016  17:32:31 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\ATmega128Project\src\ISR. #
#                    c                                                        #
#    Command line =  C:\Users\Administrator\Desktop\ATmega128Project\src\ISR. #
#                    c --cpu=m128a -ms -o C:\Users\Administrator\Desktop\ATme #
#                    ga128Project\Debug\Obj\ -lCN                             #
#                    C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\ -lb C:\Users\Administrator\Desktop\ATmega128Project\ #
#                    Debug\List\ -y --initializers_in_flash --no_cse          #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Administrator\Desktop\ATmega128Project\inc\     #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\ISR.lst                                               #
#    Object file  =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Ob #
#                    j\ISR.r90                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\ATmega128Project\src\ISR.c
      1          /**AVR中断服务函数文件**/
      2          #include "led.h"
      3          #include "timer.h"
      4          #include <stdio.h>
      5          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x24
   \   union <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x2c
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x52
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9b
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9c
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1
      6          #include "ledshow.h"
      7          #include "uart.h"
      8          #include "beep.h"
      9          
     10          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     11          unsigned int count = 0;
   \                     count:
   \   00000000                      DS8 2
     12          
     13          extern unsigned int temp_num;
     14          extern unsigned char wei_table[];
     15          
     16          extern unsigned char comp;
     17          
     18          //外部中断0的中断服务函数
     19          #pragma vector = INT0_vect

   \                                 In  segment CODE, align 2, keep-with-next
     20          __interrupt void INT0_server(void)
   \                     INT0_server:
     21          {
   \   00000000   933A               ST      -Y, R19
   \   00000002   932A               ST      -Y, R18
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B72F               IN      R18, 0x3F
   \   0000000A   B73B               IN      R19, 0x3B
     22          	count = 1;
   \   0000000C   E001               LDI     R16, 1
   \   0000000E   E010               LDI     R17, 0
   \   00000010   9300....           STS     count, R16
   \   00000014   9310....           STS     (count + 1), R17
     23          }
   \   00000018   BF3B               OUT     0x3B, R19
   \   0000001A   BF2F               OUT     0x3F, R18
   \   0000001C   9109               LD      R16, Y+
   \   0000001E   9119               LD      R17, Y+
   \   00000020   9129               LD      R18, Y+
   \   00000022   9139               LD      R19, Y+
   \   00000024   9518               RETI
     24          
     25          //外部中断1的中断服务函数
     26          #pragma vector = INT1_vect

   \                                 In  segment CODE, align 2, keep-with-next
     27          __interrupt void INTO_server(void)
   \                     INTO_server:
     28          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B72F               IN      R18, 0x3F
   \   0000000E   B73B               IN      R19, 0x3B
     29          	if(count)
   \   00000010   9100....           LDS     R16, count
   \   00000014   9110....           LDS     R17, (count + 1)
   \   00000018   2B01               OR      R16, R17
   \   0000001A   F049               BREQ    ??INTO_server_0
     30          	{
     31          		count--;
   \   0000001C   ....               LDI     R30, LOW(count)
   \   0000001E   ....               LDI     R31, (count) >> 8
   \   00000020   8100               LD      R16, Z
   \   00000022   8111               LDD     R17, Z+1
   \   00000024   5001               SUBI    R16, 1
   \   00000026   4010               SBCI    R17, 0
   \   00000028   8300               ST      Z, R16
   \   0000002A   8311               STD     Z+1, R17
   \   0000002C   C006               RJMP    ??INTO_server_1
     32          	}		
     33          	else
     34          	{
     35          		count = 16;
   \                     ??INTO_server_0:
   \   0000002E   E100               LDI     R16, 16
   \   00000030   E010               LDI     R17, 0
   \   00000032   9300....           STS     count, R16
   \   00000036   9310....           STS     (count + 1), R17
     36          	}
     37          }
   \                     ??INTO_server_1:
   \   0000003A   BF3B               OUT     0x3B, R19
   \   0000003C   BF2F               OUT     0x3F, R18
   \   0000003E   9109               LD      R16, Y+
   \   00000040   9119               LD      R17, Y+
   \   00000042   9129               LD      R18, Y+
   \   00000044   9139               LD      R19, Y+
   \   00000046   91E9               LD      R30, Y+
   \   00000048   91F9               LD      R31, Y+
   \   0000004A   9518               RETI
     38          
     39          
     40          //定时器0的溢出中断服务函数
     41          #pragma vector = TIMER0_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     42          __interrupt void TIMER0_OVF_server(void)
   \                     TIMER0_OVF_server:
     43          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B72F               IN      R18, 0x3F
   \   0000000E   B73B               IN      R19, 0x3B
     44          	TCNT0 = F_COUNT;	//定时器赋初值
   \   00000010   EB08               LDI     R16, 184
   \   00000012   BF02               OUT     0x32, R16
     45          //	ledShowNumber(temp_num,wei_table,-1,16);
     46          	count ++;
   \   00000014   ....               LDI     R30, LOW(count)
   \   00000016   ....               LDI     R31, (count) >> 8
   \   00000018   8100               LD      R16, Z
   \   0000001A   8111               LDD     R17, Z+1
   \   0000001C   5F0F               SUBI    R16, 255
   \   0000001E   4F1F               SBCI    R17, 255
   \   00000020   8300               ST      Z, R16
   \   00000022   8311               STD     Z+1, R17
     47          }
   \   00000024   BF3B               OUT     0x3B, R19
   \   00000026   BF2F               OUT     0x3F, R18
   \   00000028   9109               LD      R16, Y+
   \   0000002A   9119               LD      R17, Y+
   \   0000002C   9129               LD      R18, Y+
   \   0000002E   9139               LD      R19, Y+
   \   00000030   91E9               LD      R30, Y+
   \   00000032   91F9               LD      R31, Y+
   \   00000034   9518               RETI
   \   00000036                      REQUIRE _A_TCNT0
     48          
     49          
     50          /*
     51          //定时器0的比较匹配中断服务函数,PWM输出
     52          #pragma vector = TIMER0_OVF_vect
     53          __interrupt void TIMER0_OVF_server(void)
     54          {
     55          //	static unsigned char X_LUT = 0;
     56          //	static unsigned int plus_flag = 1;
     57          //
     58          //	if(plus_flag == 1)
     59          //	{
     60          //		X_LUT ++;
     61          //		if(X_LUT >= 255)
     62          //		{
     63          //			plus_flag = 0;
     64          //		}
     65          //	}
     66          //	else
     67          //	{
     68          //		X_LUT --;
     69          //		if(X_LUT <= 0)
     70          //		{
     71          //			plus_flag = 1;
     72          //		}
     73          //	}
     74          //	
     75          //	OCR0 = X_LUT;				  	// 取样点指针到比较匹配寄存器
     76          	OCR0 = comp;
     77          }
     78          */
     79          
     80          //定时器1的溢出中断服务函数
     81          #pragma vector = TIMER1_OVF_vect

   \                                 In  segment CODE, align 2, keep-with-next
     82          __interrupt void TIMER1_OVF_server(void)
   \                     TIMER1_OVF_server:
     83          {
   \   00000000   93FA               ST      -Y, R31
   \   00000002   93EA               ST      -Y, R30
   \   00000004   933A               ST      -Y, R19
   \   00000006   932A               ST      -Y, R18
   \   00000008   931A               ST      -Y, R17
   \   0000000A   930A               ST      -Y, R16
   \   0000000C   B72F               IN      R18, 0x3F
   \   0000000E   B73B               IN      R19, 0x3B
     84          	TCNT1H = 0xE3;		//0xFF;
   \   00000010   EE03               LDI     R16, 227
   \   00000012   BD0D               OUT     0x2D, R16
     85          	TCNT1L = 0xDF;		//255 - 72;
   \   00000014   ED0F               LDI     R16, 223
   \   00000016   BD0C               OUT     0x2C, R16
     86          	TCNT1 = 58335;
   \   00000018   ED0F               LDI     R16, 223
   \   0000001A   EE13               LDI     R17, 227
   \   0000001C   BD1D               OUT     0x2D, R17
   \   0000001E   BD0C               OUT     0x2C, R16
     87          	count++;
   \   00000020   ....               LDI     R30, LOW(count)
   \   00000022   ....               LDI     R31, (count) >> 8
   \   00000024   8100               LD      R16, Z
   \   00000026   8111               LDD     R17, Z+1
   \   00000028   5F0F               SUBI    R16, 255
   \   0000002A   4F1F               SBCI    R17, 255
   \   0000002C   8300               ST      Z, R16
   \   0000002E   8311               STD     Z+1, R17
     88          	
     89          	
     90          //	TIMER1_STOP;			//定时器1停止计数
     91          //	BEEP = !BEEP;
     92          //	TCNT1 = (unsigned int)(0.6144 * Timer1_C + 65535 * 0.3856);
     93          ////	TCNT1H = Timer1_H;
     94          ////  	TCNT1L = Timer1_L;
     95          //	TIMER1_START;			//定时器1开始工作
     96          	
     97          }
   \   00000030   BF3B               OUT     0x3B, R19
   \   00000032   BF2F               OUT     0x3F, R18
   \   00000034   9109               LD      R16, Y+
   \   00000036   9119               LD      R17, Y+
   \   00000038   9129               LD      R18, Y+
   \   0000003A   9139               LD      R19, Y+
   \   0000003C   91E9               LD      R30, Y+
   \   0000003E   91F9               LD      R31, Y+
   \   00000040   9518               RETI
   \   00000042                      REQUIRE _A_TCNT1
     98          
     99          //串口1的接收中断
    100          #pragma vector = USART1_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
    101          __interrupt void USART1_RXC_server(void)
   \                     USART1_RXC_server:
    102          {
   \   00000000   934A               ST      -Y, R20
   \   00000002   933A               ST      -Y, R19
   \   00000004   932A               ST      -Y, R18
   \   00000006   931A               ST      -Y, R17
   \   00000008   930A               ST      -Y, R16
   \   0000000A   B73F               IN      R19, 0x3F
   \   0000000C   B74B               IN      R20, 0x3B
    103          	unsigned char data;
    104          	
    105          	//判断RXC标志是否置位，可删除
    106          	if(UCSR1A & 0x80)
   \   0000000E   9110....           LDS     R17, _A_UCSR1A
   \   00000012   2F21               MOV     R18, R17
   \   00000014   FF27               SBRS    R18, 7
   \   00000016   C005               RJMP    ??USART1_RXC_server_0
    107          	{
    108          		data = UDR1;
   \   00000018   9110....           LDS     R17, _A_UDR1
   \   0000001C   2F01               MOV     R16, R17
    109          		//发送数据，回显
    110          		UDR1 = data;
   \   0000001E   9300....           STS     _A_UDR1, R16
    111          	}
    112          }
   \                     ??USART1_RXC_server_0:
   \   00000022   BF4B               OUT     0x3B, R20
   \   00000024   BF3F               OUT     0x3F, R19
   \   00000026   9109               LD      R16, Y+
   \   00000028   9119               LD      R17, Y+
   \   0000002A   9129               LD      R18, Y+
   \   0000002C   9139               LD      R19, Y+
   \   0000002E   9149               LD      R20, Y+
   \   00000030   9518               RETI
   \   00000032                      REQUIRE _A_UCSR1A
   \   00000032                      REQUIRE _A_UDR1
    113          
    114          //串口0的接收中断服务函数
    115          #pragma vector = USART0_RXC_vect

   \                                 In  segment CODE, align 2, keep-with-next
    116          __interrupt void USART0_RXC_server(void)
   \                     USART0_RXC_server:
    117          {
   \   00000000   933A               ST      -Y, R19
   \   00000002   932A               ST      -Y, R18
   \   00000004   931A               ST      -Y, R17
   \   00000006   930A               ST      -Y, R16
   \   00000008   B72F               IN      R18, 0x3F
   \   0000000A   B73B               IN      R19, 0x3B
    118          	unsigned char data;
    119          	
    120          		//判断RXC标志是否置位，可删除
    121          //	if(UCSR0A & 0x80)
    122          	{
    123          		data = UDR0;
   \   0000000C   B11C               IN      R17, 0x0C
   \   0000000E   2F01               MOV     R16, R17
    124          		//发送数据，回显
    125          		UDR0 = data;
   \   00000010   B90C               OUT     0x0C, R16
    126          	}
    127          }
   \   00000012   BF3B               OUT     0x3B, R19
   \   00000014   BF2F               OUT     0x3F, R18
   \   00000016   9109               LD      R16, Y+
   \   00000018   9119               LD      R17, Y+
   \   0000001A   9129               LD      R18, Y+
   \   0000001C   9139               LD      R19, Y+
   \   0000001E   9518               RETI
   \   00000020                      REQUIRE _A_UDR0
    128          
    129          
    130          //ADC的转换结束中断服务函数
    131          #pragma vector = ADC_vect

   \                                 In  segment CODE, align 2, keep-with-next
    132          __interrupt void ADC_server(void)
   \                     ADC_server:
    133          {
   \   00000000   925A               ST      -Y, R5
   \   00000002   924A               ST      -Y, R4
   \   00000004   93BA               ST      -Y, R27
   \   00000006   93AA               ST      -Y, R26
   \   00000008   939A               ST      -Y, R25
   \   0000000A   938A               ST      -Y, R24
   \   0000000C   93FA               ST      -Y, R31
   \   0000000E   93EA               ST      -Y, R30
   \   00000010   923A               ST      -Y, R3
   \   00000012   922A               ST      -Y, R2
   \   00000014   921A               ST      -Y, R1
   \   00000016   920A               ST      -Y, R0
   \   00000018   937A               ST      -Y, R23
   \   0000001A   936A               ST      -Y, R22
   \   0000001C   935A               ST      -Y, R21
   \   0000001E   934A               ST      -Y, R20
   \   00000020   933A               ST      -Y, R19
   \   00000022   932A               ST      -Y, R18
   \   00000024   931A               ST      -Y, R17
   \   00000026   930A               ST      -Y, R16
   \   00000028   B64F               IN      R4, 0x3F
   \   0000002A   B65B               IN      R5, 0x3B
   \   0000002C                      REQUIRE ?Register_R4_is_cg_reg
   \   0000002C                      REQUIRE ?Register_R5_is_cg_reg
    134          	unsigned char adc_data[2];
    135          //	unsigned char j = 0;
    136          	unsigned int data;
    137          	adc_data[0] = ADCL;
   \   0000002C   B104               IN      R16, 0x04
   \   0000002E   2F80               MOV     R24, R16
    138          	adc_data[1] = ADCH;
   \   00000030   B105               IN      R16, 0x05
   \   00000032   2F90               MOV     R25, R16
    139          	data = (adc_data[1] << 8) + adc_data[0];
   \   00000034   2F19               MOV     R17, R25
   \   00000036   E000               LDI     R16, 0
   \   00000038   2F28               MOV     R18, R24
   \   0000003A   E030               LDI     R19, 0
   \   0000003C   0F02               ADD     R16, R18
   \   0000003E   1F13               ADC     R17, R19
   \   00000040   01D8               MOVW    R27:R26, R17:R16
    140          	//不使用循环显示，数码管跳变太快
    141          //	for(j = 0;j<50;j++)
    142          //		ledShowNumber(data,wei_table,-1,10);
    143          		printf("ADC = % 4d\r\n",data);
   \   00000042   93BA               ST      -Y, R27
   \   00000044   93AA               ST      -Y, R26
   \   00000046   ....               LDI     R16, LOW(`?<Constant "ADC = % 4d\\r\\n">`)
   \   00000048   ....               LDI     R17, (`?<Constant "ADC = % 4d\\r\\n">`) >> 8
   \   0000004A   ........           CALL    printf
   \   0000004E   9622               ADIW    R29:R28, 2
    144          }
   \   00000050   BE5B               OUT     0x3B, R5
   \   00000052   BE4F               OUT     0x3F, R4
   \   00000054   9109               LD      R16, Y+
   \   00000056   9119               LD      R17, Y+
   \   00000058   9129               LD      R18, Y+
   \   0000005A   9139               LD      R19, Y+
   \   0000005C   9149               LD      R20, Y+
   \   0000005E   9159               LD      R21, Y+
   \   00000060   9169               LD      R22, Y+
   \   00000062   9179               LD      R23, Y+
   \   00000064   9009               LD      R0, Y+
   \   00000066   9019               LD      R1, Y+
   \   00000068   9029               LD      R2, Y+
   \   0000006A   9039               LD      R3, Y+
   \   0000006C   91E9               LD      R30, Y+
   \   0000006E   91F9               LD      R31, Y+
   \   00000070   9189               LD      R24, Y+
   \   00000072   9199               LD      R25, Y+
   \   00000074   91A9               LD      R26, Y+
   \   00000076   91B9               LD      R27, Y+
   \   00000078   9049               LD      R4, Y+
   \   0000007A   9059               LD      R5, Y+
   \   0000007C   9518               RETI
   \   0000007E                      REQUIRE _A_ADC

   \                                 In  segment INTVEC, offset 0x4, root
   \                     `??INT0_server??INTVEC 4`:
   \   00000004   ........           JMP     INT0_server

   \                                 In  segment INTVEC, offset 0x8, root
   \                     `??INTO_server??INTVEC 8`:
   \   00000008   ........           JMP     INTO_server

   \                                 In  segment INTVEC, offset 0x38, root
   \                     `??TIMER1_OVF_server??INTVEC 56`:
   \   00000038   ........           JMP     TIMER1_OVF_server

   \                                 In  segment INTVEC, offset 0x40, root
   \                     `??TIMER0_OVF_server??INTVEC 64`:
   \   00000040   ........           JMP     TIMER0_OVF_server

   \                                 In  segment INTVEC, offset 0x48, root
   \                     `??USART0_RXC_server??INTVEC 72`:
   \   00000048   ........           JMP     USART0_RXC_server

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??ADC_server??INTVEC 84`:
   \   00000054   ........           JMP     ADC_server

   \                                 In  segment INTVEC, offset 0x78, root
   \                     `??USART1_RXC_server??INTVEC 120`:
   \   00000078   ........           JMP     USART1_RXC_server

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for <Constant "ADC = % 4d\\r\\n">>`:
   \   00000000   44412043203D       DC8 "ADC = % 4d\015\012"
   \              202564340A0D
   \              00          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
   \                     `?<Constant "ADC = % 4d\\r\\n">`:
   \   00000000                      DS8 13
   \   0000000D                      REQUIRE `?<Initializer for <Constant "ADC = % 4d\\r\\n">>`
    145          
    146          
    147          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
     22      2   ADC_server
       22      2   -> printf
      4      2   INT0_server
      6      2   INTO_server
      6      2   TIMER0_OVF_server
      6      2   TIMER1_OVF_server
      4      2   USART0_RXC_server
      5      2   USART1_RXC_server


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      13  ?<Constant "ADC = % 4d\r\n">
      13  ?<Initializer for <Constant "ADC = % 4d\r\n">>
       4  ??ADC_server??INTVEC 84
       4  ??INT0_server??INTVEC 4
       4  ??INTO_server??INTVEC 8
       4  ??TIMER0_OVF_server??INTVEC 64
       4  ??TIMER1_OVF_server??INTVEC 56
       4  ??USART0_RXC_server??INTVEC 72
       4  ??USART1_RXC_server??INTVEC 120
     126  ADC_server
      38  INT0_server
      76  INTO_server
      54  TIMER0_OVF_server
      66  TIMER1_OVF_server
      32  USART0_RXC_server
      50  USART1_RXC_server
       2  _A_ADC
       1  _A_TCNT0
       2  _A_TCNT1
       1  _A_UCSR1A
       1  _A_UDR0
       1  _A_UDR1
       2  count
      14  -- Other

 
   8 bytes in segment ABSOLUTE
 442 bytes in segment CODE
  14 bytes in segment INITTAB
  28 bytes in segment INTVEC
  13 bytes in segment NEAR_I
  13 bytes in segment NEAR_ID
   2 bytes in segment NEAR_Z
 
 455 bytes of CODE memory (+ 42 bytes shared)
  15 bytes of DATA memory (+  8 bytes shared)

Errors: none
Warnings: none
