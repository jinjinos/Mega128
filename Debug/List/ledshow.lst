###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.20.2.50573 for Atmel AVR        12/Sep/2016  16:06:12 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Admin\Desktop\ATmega128Project\src\ledshow.c    #
#    Command line =  C:\Users\Admin\Desktop\ATmega128Project\src\ledshow.c    #
#                    --cpu=m128a -ms -o C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\Obj\ -lCN C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -lb C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -y --initializers_in_flash --no_cse       #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Admin\Desktop\ATmega128Project\inc\             #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Admin\Desktop\ATmega128Project\Debug\List\ledsh #
#                    ow.lst                                                   #
#    Object file  =  C:\Users\Admin\Desktop\ATmega128Project\Debug\Obj\ledsho #
#                    w.r90                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Admin\Desktop\ATmega128Project\src\ledshow.c
      1          
      2          #include <iom128.h>

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1
      3          #include <string.h>
      4          #include <stdlib.h>
      5          #include "ledshow.h"
      6          #include "delay.h"
      7          #include "my_math.h"
      8          #include <ctype.h>
      9          
     10          
     11          //段码，分别对应显示0123456789ABCDEF
     12          //								0	 1    2    3    4    5    6    7    8    9    A    b    C    d    E    F 

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     13          unsigned char dua_table[] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71,'\0'};
   \                     dua_table:
   \   00000000                      DS8 17
   \   00000011                      REQUIRE `?<Initializer for dua_table>`
     14          //位码，分别对应选中八个数码管

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     15          unsigned char wei_table[] = {0xfe,0xfd,0xfb,0xf7,0xef,0xdf,0xbf,0x7f,'\0'};
   \                     wei_table:
   \   00000000                      DS8 9
   \   00000009                      REQUIRE `?<Initializer for wei_table>`
     16          
     17          
     18          /*
     19          **数码管初始化程序
     20          **八段式共阴极数码管，IO输出高电平有效
     21          */

   \                                 In  segment CODE, align 2, keep-with-next
     22          void ledShowInit(void)
   \                     ledShowInit:
     23          {
     24          	//与74HC573相连的数据口PA配置为输出模式
     25          	//清零PORTA的IO输出
     26          	DATA_DDR = 0xff;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   BB0A               OUT     0x1A, R16
     27          	DATA_IO = 0x00;	
   \   00000004   E000               LDI     R16, 0
   \   00000006   BB0B               OUT     0x1B, R16
     28          	//DDRD寄存器设置PD4和PD5为输出模式 0x0011 0000
     29          	DDRD |= 0x03 << 4;				//PD6为蜂鸣器，
   \   00000008   B301               IN      R16, 0x11
   \   0000000A   6300               ORI     R16, 0x30
   \   0000000C   BB01               OUT     0x11, R16
     30          	PORTD = 0xff;
   \   0000000E   EF0F               LDI     R16, 255
   \   00000010   BB02               OUT     0x12, R16
     31          }
   \   00000012   9508               RET
   \   00000014                      REQUIRE _A_DDRA
   \   00000014                      REQUIRE _A_PORTA
   \   00000014                      REQUIRE _A_DDRD
   \   00000014                      REQUIRE _A_PORTD
     32          
     33          
     34          //显示一个长度为八的字符串

   \                                 In  segment CODE, align 2, keep-with-next
     35          void ledShow(unsigned char * str)
   \                     ledShow:
     36          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   01D8               MOVW    R27:R26, R17:R16
     37          	unsigned char i,j;
     38             	j=0x01;                    //此数据用来控制位选
   \   00000006   E091               LDI     R25, 1
     39            	for(i=0;i<8;i++)
   \   00000008   E080               LDI     R24, 0
   \                     ??ledShow_0:
   \   0000000A   3088               CPI     R24, 8
   \   0000000C   F4A8               BRCC    ??ledShow_1
     40           	{
     41          		D_CON = 1;                //控制数码管段数据的74HC573的LE管脚置高
   \   0000000E   9A94               SBI     0x12, 0x04
     42          		W_CON = 1;                //控制数码管位的74HC573的LE管脚置高
   \   00000010   9A95               SBI     0x12, 0x05
     43          		DATA_IO=~j;               //设置要显示的位，也就是哪一个数码管亮
   \   00000012   2F09               MOV     R16, R25
   \   00000014   9500               COM     R16
   \   00000016   BB0B               OUT     0x1B, R16
     44          		W_CON = 0;                //锁存位数据，下面送上段数据以后，就显示出来了
   \   00000018   9895               CBI     0x12, 0x05
     45          		j=(j<<1);
   \   0000001A   0F99               LSL     R25
     46          		DATA_IO=*(str + i);         //送要显示的数据，就是段数据，如显示0送的是0x3f
   \   0000001C   2F08               MOV     R16, R24
   \   0000001E   E010               LDI     R17, 0
   \   00000020   01FD               MOVW    R31:R30, R27:R26
   \   00000022   0FE0               ADD     R30, R16
   \   00000024   1FF1               ADC     R31, R17
   \   00000026   8100               LD      R16, Z
   \   00000028   BB0B               OUT     0x1B, R16
     47          		D_CON = 0;                    //锁存段数据，数码管亮一个时间片刻
   \   0000002A   9894               CBI     0x12, 0x04
     48          		delay_ms(1);              //显示一个时间片刻，会影响亮度和闪烁性
   \   0000002C   E001               LDI     R16, 1
   \   0000002E   E010               LDI     R17, 0
   \   00000030   ........           CALL    delay_ms
     49            	}
   \   00000034   9583               INC     R24
   \   00000036   CFE9               RJMP    ??ledShow_0
     50          }
   \                     ??ledShow_1:
   \   00000038   E0E4               LDI     R30, 4
   \   0000003A   ........           JMP     ?EPILOGUE_B4_L09
   \   0000003E                      REQUIRE _A_PORTD
   \   0000003E                      REQUIRE _A_PORTA
     51          
     52          //将一个字符重复显示八次

   \                                 In  segment CODE, align 2, keep-with-next
     53          void Display_Key(unsigned char num)
   \                     Display_Key:
     54          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
   \   00000004   2FA0               MOV     R26, R16
     55          	unsigned char i,j;
     56             	j=0x01;                    //此数据用来控制位选
   \   00000006   E091               LDI     R25, 1
     57            	
     58          	for(i=0;i<8;i++)  
   \   00000008   E080               LDI     R24, 0
   \                     ??Display_Key_0:
   \   0000000A   3088               CPI     R24, 8
   \   0000000C   F4C0               BRCC    ??Display_Key_1
     59            	{
     60              	D_CON = 1;                    //控制数码管段数据的74HC573的LE管脚置高
   \   0000000E   9A94               SBI     0x12, 0x04
     61             		W_CON = 1;                    //控制数码管位的74HC573的LE管脚置高
   \   00000010   9A95               SBI     0x12, 0x05
     62              	DATA_IO = wei_table[i];        //设置要显示的位，也就是哪一个数码管亮，这里是八个一起显示
   \   00000012   2F08               MOV     R16, R24
   \   00000014   E010               LDI     R17, 0
   \   00000016   01F8               MOVW    R31:R30, R17:R16
   \   00000018   ....               SUBI    R30, LOW((-(wei_table) & 0xFFFF))
   \   0000001A   ....               SBCI    R31, (-(wei_table) & 0xFFFF) >> 8
   \   0000001C   8100               LD      R16, Z
   \   0000001E   BB0B               OUT     0x1B, R16
     63              	W_CON = 0;                    //锁存位数据，下面送上段数据以后，就显示出来了
   \   00000020   9895               CBI     0x12, 0x05
     64          		j=(j<<1);
   \   00000022   0F99               LSL     R25
     65          	    DATA_IO=dua_table[num];         //送要显示的数据，就是段数据，如显示0送的是0x3f
   \   00000024   E0B0               LDI     R27, 0
   \   00000026   01FD               MOVW    R31:R30, R27:R26
   \   00000028   ....               SUBI    R30, LOW((-(dua_table) & 0xFFFF))
   \   0000002A   ....               SBCI    R31, (-(dua_table) & 0xFFFF) >> 8
   \   0000002C   8100               LD      R16, Z
   \   0000002E   BB0B               OUT     0x1B, R16
     66          	    D_CON = 0;                    //锁存段数据，数码管亮一个时间片刻
   \   00000030   9894               CBI     0x12, 0x04
     67          	    delay_ms(1);              //显示一个时间片刻，会影响亮度和闪烁性
   \   00000032   E001               LDI     R16, 1
   \   00000034   E010               LDI     R17, 0
   \   00000036   ........           CALL    delay_ms
     68          	  }
   \   0000003A   9583               INC     R24
   \   0000003C   CFE6               RJMP    ??Display_Key_0
     69          
     70          }
   \                     ??Display_Key_1:
   \   0000003E   E0E4               LDI     R30, 4
   \   00000040   ........           JMP     ?EPILOGUE_B4_L09
   \   00000044                      REQUIRE _A_PORTD
   \   00000044                      REQUIRE _A_PORTA
     71          
     72          /*
     73          ** 八段数码管显示函数
     74          **duan_num: 要显示到数码管上的字符串数字
     75          **wei_str: 选择用来显示的数码管
     76          **point_num:显示小数点的位 取值0-6
     77          */
     78          

   \                                 In  segment CODE, align 2, keep-with-next
     79          void ledShowSTR(char * duan_num, unsigned char * wei_str,int point_num)
   \                     ledShowSTR:
     80          {
   \   00000000   ........           CALL    ?PROLOGUE8_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004   01D8               MOVW    R27:R26, R17:R16
   \   00000006   0139               MOVW    R7:R6, R19:R18
   \   00000008   012A               MOVW    R5:R4, R21:R20
     81          	unsigned int i = 0; 
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
     82          	
     83          	//根据位码的长度判断循环的次数
     84          	for(i = 0;i < strlen((char*)wei_str)  ;i++)
   \   0000000E   E080               LDI     R24, 0
   \   00000010   E090               LDI     R25, 0
   \                     ??ledShowSTR_0:
   \   00000012   0183               MOVW    R17:R16, R7:R6
   \   00000014   ........           CALL    strlen
   \   00000018   1780               CP      R24, R16
   \   0000001A   0791               CPC     R25, R17
   \   0000001C   F008               BRCS    $+2+2
   \   0000001E   C04F               RJMP    ??ledShowSTR_1
     85          //	for( i = 0;i<strlen((char *)duan_num);i++)
     86          	{
     87          
     88          		
     89          		DATA_IO = wei_str[i];	//取位码
   \   00000020   01F3               MOVW    R31:R30, R7:R6
   \   00000022   0FE8               ADD     R30, R24
   \   00000024   1FF9               ADC     R31, R25
   \   00000026   8100               LD      R16, Z
   \   00000028   BB0B               OUT     0x1B, R16
     90          		W_CON = 1;			//位锁存
   \   0000002A   9A95               SBI     0x12, 0x05
     91          		W_CON = 0;
   \   0000002C   9895               CBI     0x12, 0x05
     92          		
     93          		
     94          		if(duan_num[i] <= '9' && duan_num[i] >= '0')
   \   0000002E   01FD               MOVW    R31:R30, R27:R26
   \   00000030   0FE8               ADD     R30, R24
   \   00000032   1FF9               ADC     R31, R25
   \   00000034   8100               LD      R16, Z
   \   00000036   330A               CPI     R16, 58
   \   00000038   F488               BRCC    ??ledShowSTR_2
   \   0000003A   01FD               MOVW    R31:R30, R27:R26
   \   0000003C   0FE8               ADD     R30, R24
   \   0000003E   1FF9               ADC     R31, R25
   \   00000040   8100               LD      R16, Z
   \   00000042   3300               CPI     R16, 48
   \   00000044   F058               BRCS    ??ledShowSTR_2
     95          		{
     96          			DATA_IO = dua_table[duan_num[i] - '0'];	//取段码			//0123456789
   \   00000046   01FD               MOVW    R31:R30, R27:R26
   \   00000048   0FE8               ADD     R30, R24
   \   0000004A   1FF9               ADC     R31, R25
   \   0000004C   8100               LD      R16, Z
   \   0000004E   E010               LDI     R17, 0
   \   00000050   01F8               MOVW    R31:R30, R17:R16
   \   00000052   ....               SUBI    R30, LOW((-(dua_table - 48) & 0xFFFF))
   \   00000054   ....               SBCI    R31, HIGH((-(dua_table - 48) & 0xFFFF))
   \   00000056   8100               LD      R16, Z
   \   00000058   BB0B               OUT     0x1B, R16
   \   0000005A   C020               RJMP    ??ledShowSTR_3
     97          		}
     98          		else if(toupper(duan_num[i]) <= 'F' && toupper(duan_num[i]) >= 'A')
   \                     ??ledShowSTR_2:
   \   0000005C   01FD               MOVW    R31:R30, R27:R26
   \   0000005E   0FE8               ADD     R30, R24
   \   00000060   1FF9               ADC     R31, R25
   \   00000062   8100               LD      R16, Z
   \   00000064   E010               LDI     R17, 0
   \   00000066   ........           CALL    toupper
   \   0000006A   3407               CPI     R16, 71
   \   0000006C   E020               LDI     R18, 0
   \   0000006E   0712               CPC     R17, R18
   \   00000070   F4AC               BRGE    ??ledShowSTR_3
   \   00000072   01FD               MOVW    R31:R30, R27:R26
   \   00000074   0FE8               ADD     R30, R24
   \   00000076   1FF9               ADC     R31, R25
   \   00000078   8100               LD      R16, Z
   \   0000007A   E010               LDI     R17, 0
   \   0000007C   ........           CALL    toupper
   \   00000080   3401               CPI     R16, 65
   \   00000082   E020               LDI     R18, 0
   \   00000084   0712               CPC     R17, R18
   \   00000086   F054               BRLT    ??ledShowSTR_3
     99          		{
    100          			DATA_IO = dua_table[duan_num[i] - '7'];	//取段码			//ABCDEF
   \   00000088   01FD               MOVW    R31:R30, R27:R26
   \   0000008A   0FE8               ADD     R30, R24
   \   0000008C   1FF9               ADC     R31, R25
   \   0000008E   8100               LD      R16, Z
   \   00000090   E010               LDI     R17, 0
   \   00000092   01F8               MOVW    R31:R30, R17:R16
   \   00000094   ....               SUBI    R30, LOW((-(dua_table - 55) & 0xFFFF))
   \   00000096   ....               SBCI    R31, HIGH((-(dua_table - 55) & 0xFFFF))
   \   00000098   8100               LD      R16, Z
   \   0000009A   BB0B               OUT     0x1B, R16
    101          		}
    102          		
    103          		if(i == point_num && point_num != 7)
   \                     ??ledShowSTR_3:
   \   0000009C   1584               CP      R24, R4
   \   0000009E   0595               CPC     R25, R5
   \   000000A0   F431               BRNE    ??ledShowSTR_4
   \   000000A2   E007               LDI     R16, 7
   \   000000A4   1640               CP      R4, R16
   \   000000A6   E000               LDI     R16, 0
   \   000000A8   0650               CPC     R5, R16
   \   000000AA   F009               BREQ    ??ledShowSTR_4
    104          		{
    105          			DATA_IO |= 0x80;	//倒数第二位显示小数点
   \   000000AC   9ADF               SBI     0x1B, 0x07
    106          		}
    107          		D_CON = 1;			//段锁存
   \                     ??ledShowSTR_4:
   \   000000AE   9A94               SBI     0x12, 0x04
    108          		D_CON = 0;
   \   000000B0   9894               CBI     0x12, 0x04
    109          		
    110          		delay_ms(1);	// 扫描时间间隙，太长会闪烁，太短会重影
   \   000000B2   E001               LDI     R16, 1
   \   000000B4   E010               LDI     R17, 0
   \   000000B6   ........           CALL    delay_ms
    111          		
    112          //		DATA_IO = 0;	//清空数据避免有阴影
    113          //		D_CON = 1;		//段锁存
    114          //		D_CON = 0;	
    115          	}
   \   000000BA   9601               ADIW    R25:R24, 1
   \   000000BC   CFAA               RJMP    ??ledShowSTR_0
    116          }
   \                     ??ledShowSTR_1:
   \   000000BE   E0E8               LDI     R30, 8
   \   000000C0   ........           JMP     ?EPILOGUE_B8_L09
   \   000000C4                      REQUIRE _A_PORTA
   \   000000C4                      REQUIRE _A_PORTD
    117          
    118          

   \                                 In  segment CODE, align 2, keep-with-next
    119          void ledShowNumber(unsigned long num, unsigned char * wei_str,int point_num,int radix)
   \                     ledShowNumber:
    120          {
   \   00000000   ........           CALL    ?PROLOGUE12_L09
   \   00000004                      REQUIRE ?Register_R4_is_cg_reg
   \   00000004                      REQUIRE ?Register_R5_is_cg_reg
   \   00000004                      REQUIRE ?Register_R6_is_cg_reg
   \   00000004                      REQUIRE ?Register_R7_is_cg_reg
   \   00000004                      REQUIRE ?Register_R8_is_cg_reg
   \   00000004                      REQUIRE ?Register_R9_is_cg_reg
   \   00000004                      REQUIRE ?Register_R10_is_cg_reg
   \   00000004                      REQUIRE ?Register_R11_is_cg_reg
   \   00000004   9729               SBIW    R29:R28, 9
   \   00000006   0128               MOVW    R5:R4, R17:R16
   \   00000008   0139               MOVW    R7:R6, R19:R18
   \   0000000A   01DA               MOVW    R27:R26, R21:R20
   \   0000000C   014B               MOVW    R9:R8, R23:R22
   \   0000000E   898D               LDD     R24, Y+21
   \   00000010   899E               LDD     R25, Y+22
    121          	char  buffer[9] = {'\0'};
   \   00000012   019E               MOVW    R19:R18, R29:R28
   \   00000014   01F9               MOVW    R31:R30, R19:R18
   \   00000016   E040               LDI     R20, 0
   \   00000018   E009               LDI     R16, 9
   \                     ??ledShowNumber_0:
   \   0000001A   9341               ST      Z+, R20
   \   0000001C   950A               DEC     R16
   \   0000001E   F7E9               BRNE    ??ledShowNumber_0
    122          //	unsigned char wei_tab[9] = {'\0'};
    123          //	short int i = 0;
    124          
    125          	//将要显示的数字转化为字符串	
    126          	itoa(num,buffer,radix);
   \   00000020   01BC               MOVW    R23:R22, R25:R24
   \   00000022   01AE               MOVW    R21:R20, R29:R28
   \   00000024   0182               MOVW    R17:R16, R5:R4
   \   00000026   0193               MOVW    R19:R18, R7:R6
   \   00000028   ........           CALL    itoa
    127          /*	
    128          	//将wei_str中的后strlen(num_str)位复制到wei_tab[]
    129          
    130          	for(i = 0;i < strlen(buffer);i++)
    131          	{
    132          		wei_tab[i] = wei_str[strlen(wei_str) - strlen(buffer) + i];
    133          	}
    134          */
    135          
    136          //	ledShowSTR(buffer,wei_str,point_num);
    137          	ledShowSTR(buffer, wei_str + strlen((char *)wei_str) - strlen((char *)buffer), point_num);
   \   0000002C   018D               MOVW    R17:R16, R27:R26
   \   0000002E   ........           CALL    strlen
   \   00000032   0158               MOVW    R11:R10, R17:R16
   \   00000034   018E               MOVW    R17:R16, R29:R28
   \   00000036   ........           CALL    strlen
   \   0000003A   01A4               MOVW    R21:R20, R9:R8
   \   0000003C   019D               MOVW    R19:R18, R27:R26
   \   0000003E   0D2A               ADD     R18, R10
   \   00000040   1D3B               ADC     R19, R11
   \   00000042   9511               NEG     R17
   \   00000044   9501               NEG     R16
   \   00000046   4010               SBCI    R17, 0
   \   00000048   0F20               ADD     R18, R16
   \   0000004A   1F31               ADC     R19, R17
   \   0000004C   018E               MOVW    R17:R16, R29:R28
   \   0000004E   ....               RCALL   ledShowSTR
    138          	
    139          }
   \   00000050   9629               ADIW    R29:R28, 9
   \   00000052   E0EE               LDI     R30, 14
   \   00000054   ........           JMP     ?EPILOGUE_B12_L09

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for dua_table>`:
   \   00000000   063F4F5B6D66       DC8 63, 6, 91, 79, 102, 109, 125, 7, 127, 111, 119, 124, 57, 94, 121
   \              077D6F7F7C77
   \              5E3979      
   \   0000000F   0071               DC8 113, 0

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for wei_table>`:
   \   00000000   FDFEF7FBDFEF       DC8 254, 253, 251, 247, 239, 223, 191, 127, 0
   \              7FBF00      

   \                                 In  segment FAR_F, align 1, keep-with-next
   \   00000000   000000000000       DC8 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              000000      
    140          
    141          
    142          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   Display_Key
        4      2   -> delay_ms
      4      2   ledShow
        4      2   -> delay_ms
      0      2   ledShowInit
     23      2   ledShowNumber
       23      2   -> itoa
       23      2   -> ledShowSTR
       23      2   -> strlen
      8      2   ledShowSTR
        8      2   -> delay_ms
        8      2   -> strlen
        8      2   -> toupper


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       9  ?<Constant {0}>
      17  ?<Initializer for dua_table>
       9  ?<Initializer for wei_table>
      68  Display_Key
       1  _A_DDRA
       1  _A_DDRD
       1  _A_PORTA
       1  _A_PORTD
      17  dua_table
      62  ledShow
      20  ledShowInit
      88  ledShowNumber
     196  ledShowSTR
       9  wei_table
       7  -- Other

 
   4 bytes in segment ABSOLUTE
 434 bytes in segment CODE
   9 bytes in segment FAR_F
   7 bytes in segment INITTAB
  26 bytes in segment NEAR_I
  26 bytes in segment NEAR_ID
 
 469 bytes of CODE memory (+ 7 bytes shared)
  26 bytes of DATA memory (+ 4 bytes shared)

Errors: none
Warnings: none
