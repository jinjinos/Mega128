###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.20.2.50573 for Atmel AVR        12/Sep/2016  16:06:12 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Admin\Desktop\ATmega128Project\src\step_motor.c #
#    Command line =  C:\Users\Admin\Desktop\ATmega128Project\src\step_motor.c #
#                     --cpu=m128a -ms -o C:\Users\Admin\Desktop\ATmega128Proj #
#                    ect\Debug\Obj\ -lCN C:\Users\Admin\Desktop\ATmega128Proj #
#                    ect\Debug\List\ -lb C:\Users\Admin\Desktop\ATmega128Proj #
#                    ect\Debug\List\ -y --initializers_in_flash --no_cse      #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Admin\Desktop\ATmega128Project\inc\             #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Admin\Desktop\ATmega128Project\Debug\List\step_ #
#                    motor.lst                                                #
#    Object file  =  C:\Users\Admin\Desktop\ATmega128Project\Debug\Obj\step_m #
#                    otor.r90                                                 #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Admin\Desktop\ATmega128Project\src\step_motor.c
      1          #include <stdio.h>
      2          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
      3          #include "delay.h"
      4          #include "step_motor.h"
      5          
      6          /*步进电机驱动程序*/
      7          //步进电机为四相八拍驱动方式，额定电压为5V,ABCD分别对应PB1-PB4
      8          //步距角为：5.625° /64	 减速比为1/64
      9          
     10          

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     11          unsigned char  F_Rotation[8]={0xE2,0xE6,0xE4,0xEC,0xE8,0xF8,0xF0,0xF2};//正转表格， 0111，0011 1011，1001 1101，1100 ，1110，0110
   \                     F_Rotation:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for F_Rotation>`

   \                                 In  segment NEAR_I, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_I>`
     12          unsigned char  B_Rotation[8]={0xF2,0xF0,0xF8,0xE8,0xEC,0xE4,0xE6,0xE2};//反转表格
   \                     B_Rotation:
   \   00000000                      DS8 8
   \   00000008                      REQUIRE `?<Initializer for B_Rotation>`
     13          
     14          //步进电机初始化，PB1-PB4输出模式
     15          //在LED的初始化中包含PortB的初始化

   \                                 In  segment CODE, align 2, keep-with-next
     16          void stepMotorInit(void)
   \                     stepMotorInit:
     17          {
     18          //	DDRB = 0xff;		//配置为输出模式
     19          	DDRB |= (0xf << 1);		//只配置PB1-PB4为输出
   \   00000000   B307               IN      R16, 0x17
   \   00000002   610E               ORI     R16, 0x1E
   \   00000004   BB07               OUT     0x17, R16
     20          	
     21          	PORTB &= ~(0xf << 1);	//输出清零
   \   00000006   B308               IN      R16, 0x18
   \   00000008   7E01               ANDI    R16, 0xE1
   \   0000000A   BB08               OUT     0x18, R16
     22          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_DDRB
   \   0000000E                      REQUIRE _A_PORTB
     23          
     24          //步进电机正转  逆时针

   \                                 In  segment CODE, align 2, keep-with-next
     25          void stepMotorForeward(void)
   \                     stepMotorForeward:
     26          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
     27          	unsigned int j = 0,i = 0;
   \   00000004   E0A0               LDI     R26, 0
   \   00000006   E0B0               LDI     R27, 0
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
     28          	for(j = 0; j < 64 * 8; j++)
   \   0000000C   E0A0               LDI     R26, 0
   \   0000000E   E0B0               LDI     R27, 0
   \                     ??stepMotorForeward_0:
   \   00000010   30A0               CPI     R26, 0
   \   00000012   E002               LDI     R16, 2
   \   00000014   07B0               CPC     R27, R16
   \   00000016   F4B0               BRCC    ??stepMotorForeward_1
     29          	{
     30          		for(i = 0; i < 8; i++)
   \   00000018   E080               LDI     R24, 0
   \   0000001A   E090               LDI     R25, 0
   \                     ??stepMotorForeward_2:
   \   0000001C   3088               CPI     R24, 8
   \   0000001E   E000               LDI     R16, 0
   \   00000020   0790               CPC     R25, R16
   \   00000022   F470               BRCC    ??stepMotorForeward_3
     31          		{
     32          			PORTB = F_Rotation[i];
   \   00000024   01FC               MOVW    R31:R30, R25:R24
   \   00000026   ....               SUBI    R30, LOW((-(F_Rotation) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(F_Rotation) & 0xFFFF) >> 8
   \   0000002A   8100               LD      R16, Z
   \   0000002C   BB08               OUT     0x18, R16
     33          			_delay_ms(10);
   \   0000002E   EF0F               LDI     R16, 255
   \   00000030   E417               LDI     R17, 71
   \   00000032   5001               SUBI    R16, 1
   \   00000034   4010               SBCI    R17, 0
   \   00000036   F7E9               BRNE    $-4
   \   00000038   C000               RJMP    $+2
   \   0000003A   0000               NOP
     34          		}
   \   0000003C   9601               ADIW    R25:R24, 1
   \   0000003E   CFEE               RJMP    ??stepMotorForeward_2
     35          	}
   \                     ??stepMotorForeward_3:
   \   00000040   9611               ADIW    R27:R26, 1
   \   00000042   CFE6               RJMP    ??stepMotorForeward_0
     36          }
   \                     ??stepMotorForeward_1:
   \   00000044   E0E4               LDI     R30, 4
   \   00000046   ........           JMP     ?EPILOGUE_B4_L09
   \   0000004A                      REQUIRE _A_PORTB
     37          
     38          //步进电机反转		顺时针

   \                                 In  segment CODE, align 2, keep-with-next
     39          void stepMotorBackward(void)
   \                     stepMotorBackward:
     40          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
     41          	unsigned int i = 0, j = 0;
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
   \   00000008   E0A0               LDI     R26, 0
   \   0000000A   E0B0               LDI     R27, 0
     42          	for(j = 0;j < 64*8; j++)
   \   0000000C   E0A0               LDI     R26, 0
   \   0000000E   E0B0               LDI     R27, 0
   \                     ??stepMotorBackward_0:
   \   00000010   30A0               CPI     R26, 0
   \   00000012   E002               LDI     R16, 2
   \   00000014   07B0               CPC     R27, R16
   \   00000016   F4B0               BRCC    ??stepMotorBackward_1
     43          	{
     44          		for(i = 0; i < 8; i++)
   \   00000018   E080               LDI     R24, 0
   \   0000001A   E090               LDI     R25, 0
   \                     ??stepMotorBackward_2:
   \   0000001C   3088               CPI     R24, 8
   \   0000001E   E000               LDI     R16, 0
   \   00000020   0790               CPC     R25, R16
   \   00000022   F470               BRCC    ??stepMotorBackward_3
     45          		{
     46          			PORTB = B_Rotation[i];
   \   00000024   01FC               MOVW    R31:R30, R25:R24
   \   00000026   ....               SUBI    R30, LOW((-(B_Rotation) & 0xFFFF))
   \   00000028   ....               SBCI    R31, (-(B_Rotation) & 0xFFFF) >> 8
   \   0000002A   8100               LD      R16, Z
   \   0000002C   BB08               OUT     0x18, R16
     47          			_delay_ms(10);
   \   0000002E   EF0F               LDI     R16, 255
   \   00000030   E417               LDI     R17, 71
   \   00000032   5001               SUBI    R16, 1
   \   00000034   4010               SBCI    R17, 0
   \   00000036   F7E9               BRNE    $-4
   \   00000038   C000               RJMP    $+2
   \   0000003A   0000               NOP
     48          		}
   \   0000003C   9601               ADIW    R25:R24, 1
   \   0000003E   CFEE               RJMP    ??stepMotorBackward_2
     49          	}
   \                     ??stepMotorBackward_3:
   \   00000040   9611               ADIW    R27:R26, 1
   \   00000042   CFE6               RJMP    ??stepMotorBackward_0
     50          }
   \                     ??stepMotorBackward_1:
   \   00000044   E0E4               LDI     R30, 4
   \   00000046   ........           JMP     ?EPILOGUE_B4_L09
   \   0000004A                      REQUIRE _A_PORTB

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for F_Rotation>`:
   \   00000000   E6E2ECE4F8E8       DC8 226, 230, 228, 236, 232, 248, 240, 242
   \              F2F0        

   \                                 In  segment NEAR_ID, align 1, keep-with-next
   \                     `?<Initializer for B_Rotation>`:
   \   00000000   F0F2E8F8E4EC       DC8 242, 240, 248, 232, 236, 228, 230, 226
   \              E2E6        
     51          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   stepMotorBackward
      4      2   stepMotorForeward
      0      2   stepMotorInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Initializer for B_Rotation>
       8  ?<Initializer for F_Rotation>
       8  B_Rotation
       8  F_Rotation
       1  _A_DDRB
       1  _A_PORTB
      74  stepMotorBackward
      74  stepMotorForeward
      14  stepMotorInit
       7  -- Other

 
   2 bytes in segment ABSOLUTE
 162 bytes in segment CODE
   7 bytes in segment INITTAB
  16 bytes in segment NEAR_I
  16 bytes in segment NEAR_ID
 
 178 bytes of CODE memory (+ 7 bytes shared)
  16 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
