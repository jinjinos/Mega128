###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR        20/Sep/2016  17:32:32 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\ATmega128Project\src\dela #
#                    y.c                                                      #
#    Command line =  C:\Users\Administrator\Desktop\ATmega128Project\src\dela #
#                    y.c --cpu=m128a -ms -o C:\Users\Administrator\Desktop\AT #
#                    mega128Project\Debug\Obj\ -lCN                           #
#                    C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\ -lb C:\Users\Administrator\Desktop\ATmega128Project\ #
#                    Debug\List\ -y --initializers_in_flash --no_cse          #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Administrator\Desktop\ATmega128Project\inc\     #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\delay.lst                                             #
#    Object file  =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Ob #
#                    j\delay.r90                                              #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\ATmega128Project\src\delay.c
      1          
      2          #include "delay.h"
      3          
      4          
      5          /*
      6          **			简单延时
      7          **
      8          */

   \                                 In  segment CODE, align 2, keep-with-next
      9          void delay(int n)
   \                     delay:
     10          {
   \   00000000   ........           CALL    ?PROLOGUE4_L09
     11            	int i = 0,j = n;
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
   \   00000008   01D8               MOVW    R27:R26, R17:R16
     12          	for(i = 0;i <= 1000; i++)
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??delay_0:
   \   0000000E   3E89               CPI     R24, 233
   \   00000010   E023               LDI     R18, 3
   \   00000012   0792               CPC     R25, R18
   \   00000014   F444               BRGE    ??delay_1
     13          	{
     14          //		for(j = n;j > 0; j--)
     15          	  while(j--);
   \                     ??delay_2:
   \   00000016   01FD               MOVW    R31:R30, R27:R26
   \   00000018   01DF               MOVW    R27:R26, R31:R30
   \   0000001A   9711               SBIW    R27:R26, 1
   \   0000001C   2BEF               OR      R30, R31
   \   0000001E   F7D9               BRNE    ??delay_2
     16          	  j = n;
   \   00000020   01D8               MOVW    R27:R26, R17:R16
     17          	}
   \   00000022   9601               ADIW    R25:R24, 1
   \   00000024   CFF4               RJMP    ??delay_0
     18          }
   \                     ??delay_1:
   \   00000026   E0E4               LDI     R30, 4
   \   00000028   ........           JMP     ?EPILOGUE_B4_L09
     19          
     20          /*us级延时*/

   \                                 In  segment CODE, align 2, keep-with-next
     21          void delay_us(unsigned int n)		
   \                     delay_us:
   \                     ??delay_us_0:
     22          {
     23          	while(n--)
   \   00000000   0198               MOVW    R19:R18, R17:R16
   \   00000002   0189               MOVW    R17:R16, R19:R18
   \   00000004   5001               SUBI    R16, 1
   \   00000006   4010               SBCI    R17, 0
   \   00000008   2B23               OR      R18, R19
   \   0000000A   F011               BREQ    ??delay_us_1
     24          	{
     25          		asm("nop");
   \   0000000C   0000               nop
   \   0000000E   CFF8               RJMP    ??delay_us_0
     26          	}
     27          }
   \                     ??delay_us_1:
   \   00000010   9508               RET
     28          
     29          
     30          /*ms级延时*/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void delay_ms(unsigned int n)
   \                     delay_ms:
     32          {
   \   00000000   2F59               MOV     R21, R25
   \   00000002   2F68               MOV     R22, R24
     33          	unsigned int i = 0,j = 0;
   \   00000004   E0E0               LDI     R30, 0
   \   00000006   E0F0               LDI     R31, 0
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
     34          	unsigned int num = (unsigned int) (XTAL * 143 -2);
   \   0000000C   E12C               LDI     R18, 28
   \   0000000E   E034               LDI     R19, 4
     35          	for	(i = 0 ; i < n; i++)
   \   00000010   E0E0               LDI     R30, 0
   \   00000012   E0F0               LDI     R31, 0
   \                     ??delay_ms_0:
   \   00000014   17E0               CP      R30, R16
   \   00000016   07F1               CPC     R31, R17
   \   00000018   F448               BRCC    ??delay_ms_1
     36          	{
     37          		for(j = 0;j < num ;j++);
   \   0000001A   E080               LDI     R24, 0
   \   0000001C   E090               LDI     R25, 0
   \                     ??delay_ms_2:
   \   0000001E   1782               CP      R24, R18
   \   00000020   0793               CPC     R25, R19
   \   00000022   F410               BRCC    ??delay_ms_3
   \   00000024   9601               ADIW    R25:R24, 1
   \   00000026   CFFB               RJMP    ??delay_ms_2
     38          	}
   \                     ??delay_ms_3:
   \   00000028   9631               ADIW    R31:R30, 1
   \   0000002A   CFF4               RJMP    ??delay_ms_0
     39          }
   \                     ??delay_ms_1:
   \   0000002C   2F86               MOV     R24, R22
   \   0000002E   2F95               MOV     R25, R21
   \   00000030   9508               RET

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      4      2   delay
      0      2   delay_ms
      0      2   delay_us


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      44  delay
      50  delay_ms
      18  delay_us

 
 112 bytes in segment CODE
 
 112 bytes of CODE memory

Errors: none
Warnings: none
