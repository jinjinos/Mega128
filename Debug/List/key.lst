###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR        20/Sep/2016  17:32:32 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\ATmega128Project\src\key. #
#                    c                                                        #
#    Command line =  C:\Users\Administrator\Desktop\ATmega128Project\src\key. #
#                    c --cpu=m128a -ms -o C:\Users\Administrator\Desktop\ATme #
#                    ga128Project\Debug\Obj\ -lCN                             #
#                    C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\ -lb C:\Users\Administrator\Desktop\ATmega128Project\ #
#                    Debug\List\ -y --initializers_in_flash --no_cse          #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Administrator\Desktop\ATmega128Project\inc\     #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\key.lst                                               #
#    Object file  =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Ob #
#                    j\key.r90                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\ATmega128Project\src\key.c
      1          /*按键的驱动程序文件*/
      2          
      3          #include <stdlib.h>
      4          #include "delay.h"
      5          #include "key.h"

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33
   \   union <unnamed> volatile __io _A_PINC
   \                     _A_PINC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x59
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1
      6          #include "my_math.h"
      7          #include "ledshow.h"
      8          
      9          
     10          //独立按键初始化

   \                                 In  segment CODE, align 2, keep-with-next
     11          void independentKeyInit(void)
   \                     independentKeyInit:
     12          {
     13          	//设置独立按键对应的IO口为输入模式
     14          	INDEP_KEY_DDR_IN;
   \   00000000   B304               IN      R16, 0x14
   \   00000002   7C0F               ANDI    R16, 0xCF
   \   00000004   BB04               OUT     0x14, R16
     15          	//独立按键对应的IO口上拉电阻使能
     16          	INDEP_KEY_PORT_0 = 1;
   \   00000006   9AAC               SBI     0x15, 0x04
     17          	INDEP_KEY_PORT_1 = 1;
   \   00000008   9AAD               SBI     0x15, 0x05
     18          //	asm("nop");			//IO口由输出方式变为输入方式要延时一个周期
     19          	
     20          }
   \   0000000A   9508               RET
   \   0000000C                      REQUIRE _A_DDRC
   \   0000000C                      REQUIRE _A_PORTC
     21          
     22          //外部中断按键初始化为

   \                                 In  segment CODE, align 2, keep-with-next
     23          void intKeyInit(void)
   \                     intKeyInit:
     24          {	
     25          	//外部中断按键对应的IO口配置为输入模式
     26          	INT_KEY_DDR_IN;
   \   00000000   B301               IN      R16, 0x11
   \   00000002   7F0C               ANDI    R16, 0xFC
   \   00000004   BB01               OUT     0x11, R16
     27          	//外部中断按键对应的IO口上拉电阻使能
     28          	INT_KEY_PORT_0 = 1;
   \   00000006   9A90               SBI     0x12, 0x00
     29          	INT_KEY_PORT_1 = 1;
   \   00000008   9A91               SBI     0x12, 0x01
     30          	asm("nop");			//IO口由输出方式变为输入方式要延时一个周期
   \   0000000A   0000               nop
     31          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_DDRD
   \   0000000E                      REQUIRE _A_PORTD
     32          
     33          
     34          //外部中断中断配置

   \                                 In  segment CODE, align 2, keep-with-next
     35          void interruptKeyInit(void)
   \                     interruptKeyInit:
     36          {
     37          	//00001010,外部中断控制寄存器，配置INT1,INT0位下降沿触发中断方式
     38          	EICRA = 0x0A;
   \   00000000   E00A               LDI     R16, 10
   \   00000002   9300....           STS     _A_EICRA, R16
     39          	//xxxxxx11,外部中断屏蔽寄存器，配置INT1,INT0外部中断使能
     40          	EIMSK |= 0x03;
   \   00000006   B709               IN      R16, 0x39
   \   00000008   6003               ORI     R16, 0x03
   \   0000000A   BF09               OUT     0x39, R16
     41          	//使能全局中断。可以防止在SystemInit()之后，使能一次即可
     42          //	SREG |= (1<<7); 
     43          }
   \   0000000C   9508               RET
   \   0000000E                      REQUIRE _A_EICRA
   \   0000000E                      REQUIRE _A_EIMSK
     44          
     45          
     46          
     47          //扫描判断是否有按键按下

   \                                 In  segment CODE, align 2, keep-with-next
     48          uchar indekeyBoardScan(void)
   \                     indekeyBoardScan:
     49          {
     50          	//独立按键1或者按键2按下
     51          	if(INDEP_KEY0_PRESS || INDEP_KEY1_PRESS)
   \   00000000   9B9C               SBIS    0x13, 0x04
   \   00000002   C002               RJMP    ??indekeyBoardScan_0
   \   00000004   999D               SBIC    0x13, 0x05
   \   00000006   C012               RJMP    ??indekeyBoardScan_1
     52          	{
     53          		_delay_ms(20);						//延时消抖
   \                     ??indekeyBoardScan_0:
   \   00000008   E303               LDI     R16, 51
   \   0000000A   E713               LDI     R17, 115
   \   0000000C   0000               NOP
   \   0000000E   5001               SUBI    R16, 1
   \   00000010   4010               SBCI    R17, 0
   \   00000012   F7E1               BRNE    $-6
     54          		if(INDEP_KEY0_PRESS)				//独立按键1按下，返回‘1’
   \   00000014   999C               SBIC    0x13, 0x04
   \   00000016   C004               RJMP    ??indekeyBoardScan_2
     55          		{
     56          			while(INDEP_KEY0_PRESS);		//等待按键抬起
   \                     ??indekeyBoardScan_3:
   \   00000018   9B9C               SBIS    0x13, 0x04
   \   0000001A   CFFE               RJMP    ??indekeyBoardScan_3
     57          			return '1';						
   \   0000001C   E301               LDI     R16, 49
   \   0000001E   9508               RET
     58          		}
     59          		else if(INDEP_KEY1_PRESS)			//独立按键2按下，返回‘2’
   \                     ??indekeyBoardScan_2:
   \   00000020   999D               SBIC    0x13, 0x05
   \   00000022   C004               RJMP    ??indekeyBoardScan_1
     60          		{
     61          			while(INDEP_KEY1_PRESS);		//等待按键抬起
   \                     ??indekeyBoardScan_4:
   \   00000024   9B9D               SBIS    0x13, 0x05
   \   00000026   CFFE               RJMP    ??indekeyBoardScan_4
     62          			return '2';
   \   00000028   E302               LDI     R16, 50
   \   0000002A   9508               RET
     63          		}
     64          	}
     65          	return 0xff;							//没有按键按下就返回0xff
   \                     ??indekeyBoardScan_1:
   \   0000002C   EF0F               LDI     R16, 255
   \   0000002E   9508               RET
   \   00000030                      REQUIRE _A_PINC
     66          }
     67          
     68          /************************** 4×4 键盘控制*********************/
     69          //4×4键盘由DA0-DA7控制，连接在mega128的PC0-PC7
     70          //其中DA0-DA3为行控制信号，DA4-DA7为列控制信号
     71          
     72          

   \                                 In  segment CODE, align 2, keep-with-next
     73          void keyInit(void)
   \                     keyInit:
     74          {
     75          	KEY_IO_DDR  = 0x0f;		//PC口高四位输入，低四位输出
   \   00000000   E00F               LDI     R16, 15
   \   00000002   BB04               OUT     0x14, R16
     76          	KEY_IO		= 0xf0;		//PC口高四位上拉电阻使能，低四位输出低电平  行全部置低，列开启上拉电阻
   \   00000004   EF00               LDI     R16, 240
   \   00000006   BB05               OUT     0x15, R16
     77          	
     78          }
   \   00000008   9508               RET
   \   0000000A                      REQUIRE _A_DDRC
   \   0000000A                      REQUIRE _A_PORTC
     79          
     80          

   \                                 In  segment CODE, align 2, keep-with-next
     81          unsigned char keyBoardScan(void)
   \                     keyBoardScan:
     82          {
     83          	unsigned char key_num = 0xff;
   \   00000000   EF0F               LDI     R16, 255
     84          	unsigned char key_checkin,key_check;
     85          	KEY_IO = 0xf0;		//在IO口输出方式变为输入方式时要延迟一个周期
   \   00000002   EF20               LDI     R18, 240
   \   00000004   BB25               OUT     0x15, R18
     86          	KEY_IO = 0xf0;		//采取写两次的方法延时
   \   00000006   EF20               LDI     R18, 240
   \   00000008   BB25               OUT     0x15, R18
     87          	
     88          	key_checkin = KEY_IO_R;			//读取IO口状态，判断是否有按键按下
   \   0000000A   B323               IN      R18, 0x13
   \   0000000C   2F12               MOV     R17, R18
     89          	
     90          	if(key_checkin != 0xf0)			//IO口的值发生变化则表示有键按下
   \   0000000E   3F10               CPI     R17, 240
   \   00000010   F409               BRNE    $+2+2
   \   00000012   C069               RJMP    ??keyBoardScan_0
     91          	{
     92          		_delay_ms(10);		//延时消抖
   \   00000014   EF4F               LDI     R20, 255
   \   00000016   E457               LDI     R21, 71
   \   00000018   5041               SUBI    R20, 1
   \   0000001A   4050               SBCI    R21, 0
   \   0000001C   F7E9               BRNE    $-4
   \   0000001E   C000               RJMP    $+2
   \   00000020   0000               NOP
     93          		key_checkin = KEY_IO_R;
   \   00000022   B323               IN      R18, 0x13
   \   00000024   2F12               MOV     R17, R18
     94          		if(key_checkin != 0xf0)
   \   00000026   3F10               CPI     R17, 240
   \   00000028   F409               BRNE    $+2+2
   \   0000002A   C05E               RJMP    ??keyBoardScan_1
     95          		{
     96          			KEY_IO = 0xfe;			//逐行扫描开始
   \   0000002C   EF2E               LDI     R18, 254
   \   0000002E   BB25               OUT     0x15, R18
     97          			KEY_IO = 0xfe;	
   \   00000030   EF2E               LDI     R18, 254
   \   00000032   BB25               OUT     0x15, R18
     98          			
     99          			key_check = KEY_IO_R;
   \   00000034   B323               IN      R18, 0x13
   \   00000036   2F32               MOV     R19, R18
    100          			switch(key_check)
   \   00000038   2F23               MOV     R18, R19
   \   0000003A   5B2E               SUBI    R18, 190
   \   0000003C   F059               BREQ    ??keyBoardScan_2
   \   0000003E   5220               SUBI    R18, 32
   \   00000040   F039               BREQ    ??keyBoardScan_3
   \   00000042   5120               SUBI    R18, 16
   \   00000044   F019               BREQ    ??keyBoardScan_4
   \   00000046   5920               SUBI    R18, 144
   \   00000048   F039               BREQ    ??keyBoardScan_5
   \   0000004A   C007               RJMP    ??keyBoardScan_6
    101          			{
    102          			  case 0xee:key_num = 15;break;
   \                     ??keyBoardScan_4:
   \   0000004C   E00F               LDI     R16, 15
   \   0000004E   C005               RJMP    ??keyBoardScan_6
    103          			  case 0xde:key_num = 11;break;
   \                     ??keyBoardScan_3:
   \   00000050   E00B               LDI     R16, 11
   \   00000052   C003               RJMP    ??keyBoardScan_6
    104          			  case 0xbe:key_num = 7;break;
   \                     ??keyBoardScan_2:
   \   00000054   E007               LDI     R16, 7
   \   00000056   C001               RJMP    ??keyBoardScan_6
    105          			  case 0x7e:key_num = 3;break; 
   \                     ??keyBoardScan_5:
   \   00000058   E003               LDI     R16, 3
    106          //			  default:key = 0xff;break;
    107          			}
    108          			
    109          			KEY_IO=0xfd;
   \                     ??keyBoardScan_6:
   \   0000005A   EF2D               LDI     R18, 253
   \   0000005C   BB25               OUT     0x15, R18
    110          			KEY_IO=0xfd;
   \   0000005E   EF2D               LDI     R18, 253
   \   00000060   BB25               OUT     0x15, R18
    111          			
    112          			key_check=KEY_IO_R;
   \   00000062   B323               IN      R18, 0x13
   \   00000064   2F32               MOV     R19, R18
    113          			switch (key_check)
   \   00000066   2F23               MOV     R18, R19
   \   00000068   5B2D               SUBI    R18, 189
   \   0000006A   F059               BREQ    ??keyBoardScan_7
   \   0000006C   5220               SUBI    R18, 32
   \   0000006E   F039               BREQ    ??keyBoardScan_8
   \   00000070   5120               SUBI    R18, 16
   \   00000072   F019               BREQ    ??keyBoardScan_9
   \   00000074   5920               SUBI    R18, 144
   \   00000076   F039               BREQ    ??keyBoardScan_10
   \   00000078   C007               RJMP    ??keyBoardScan_11
    114          			{
    115          			  case 0xed:key_num=14;break;
   \                     ??keyBoardScan_9:
   \   0000007A   E00E               LDI     R16, 14
   \   0000007C   C005               RJMP    ??keyBoardScan_11
    116          			  case 0xdd:key_num=10;break;
   \                     ??keyBoardScan_8:
   \   0000007E   E00A               LDI     R16, 10
   \   00000080   C003               RJMP    ??keyBoardScan_11
    117          			  case 0xbd:key_num=6;break;
   \                     ??keyBoardScan_7:
   \   00000082   E006               LDI     R16, 6
   \   00000084   C001               RJMP    ??keyBoardScan_11
    118          			  case 0x7d:key_num=2;break;
   \                     ??keyBoardScan_10:
   \   00000086   E002               LDI     R16, 2
    119          //			  default:key = 0xff;break;
    120          			}
    121          			 
    122          			KEY_IO=0xfb;
   \                     ??keyBoardScan_11:
   \   00000088   EF2B               LDI     R18, 251
   \   0000008A   BB25               OUT     0x15, R18
    123          			KEY_IO=0xfb;
   \   0000008C   EF2B               LDI     R18, 251
   \   0000008E   BB25               OUT     0x15, R18
    124          			
    125          			key_check=KEY_IO_R;
   \   00000090   B323               IN      R18, 0x13
   \   00000092   2F32               MOV     R19, R18
    126          			switch (key_check)
   \   00000094   2F23               MOV     R18, R19
   \   00000096   5B2B               SUBI    R18, 187
   \   00000098   F059               BREQ    ??keyBoardScan_12
   \   0000009A   5220               SUBI    R18, 32
   \   0000009C   F039               BREQ    ??keyBoardScan_13
   \   0000009E   5120               SUBI    R18, 16
   \   000000A0   F019               BREQ    ??keyBoardScan_14
   \   000000A2   5920               SUBI    R18, 144
   \   000000A4   F039               BREQ    ??keyBoardScan_15
   \   000000A6   C007               RJMP    ??keyBoardScan_16
    127          			{
    128          			  case 0xeb:key_num=13;break;
   \                     ??keyBoardScan_14:
   \   000000A8   E00D               LDI     R16, 13
   \   000000AA   C005               RJMP    ??keyBoardScan_16
    129          			  case 0xdb:key_num=9;break;
   \                     ??keyBoardScan_13:
   \   000000AC   E009               LDI     R16, 9
   \   000000AE   C003               RJMP    ??keyBoardScan_16
    130          			  case 0xbb:key_num=5;break;
   \                     ??keyBoardScan_12:
   \   000000B0   E005               LDI     R16, 5
   \   000000B2   C001               RJMP    ??keyBoardScan_16
    131          			  case 0x7b:key_num=1;break;
   \                     ??keyBoardScan_15:
   \   000000B4   E001               LDI     R16, 1
    132          //			  default:key = 0xff;break;
    133          			}
    134          			 
    135          			KEY_IO=0xf7;
   \                     ??keyBoardScan_16:
   \   000000B6   EF27               LDI     R18, 247
   \   000000B8   BB25               OUT     0x15, R18
    136          			KEY_IO=0xf7;
   \   000000BA   EF27               LDI     R18, 247
   \   000000BC   BB25               OUT     0x15, R18
    137          			
    138          			key_check=KEY_IO_R;
   \   000000BE   B323               IN      R18, 0x13
   \   000000C0   2F32               MOV     R19, R18
    139          			switch (key_check)
   \   000000C2   2F23               MOV     R18, R19
   \   000000C4   5B27               SUBI    R18, 183
   \   000000C6   F059               BREQ    ??keyBoardScan_17
   \   000000C8   5220               SUBI    R18, 32
   \   000000CA   F039               BREQ    ??keyBoardScan_18
   \   000000CC   5120               SUBI    R18, 16
   \   000000CE   F019               BREQ    ??keyBoardScan_19
   \   000000D0   5920               SUBI    R18, 144
   \   000000D2   F039               BREQ    ??keyBoardScan_20
   \   000000D4   9508               RET
    140          			{
    141          			  case 0xe7:key_num=12;break;
   \                     ??keyBoardScan_19:
   \   000000D6   E00C               LDI     R16, 12
   \   000000D8   9508               RET
    142          			  case 0xd7:key_num=8;break;
   \                     ??keyBoardScan_18:
   \   000000DA   E008               LDI     R16, 8
   \   000000DC   9508               RET
    143          			  case 0xb7:key_num=4;break;
   \                     ??keyBoardScan_17:
   \   000000DE   E004               LDI     R16, 4
   \   000000E0   9508               RET
    144          			  case 0x77:key_num=0;break;
   \                     ??keyBoardScan_20:
   \   000000E2   E000               LDI     R16, 0
   \   000000E4   9508               RET
    145          //			  default:key = 0xff;break;
    146          			 }
    147          		}
    148          	}
    149          	else
    150          	{
    151          		//无按键时的返回值
    152          		key_num = 0xff;
   \                     ??keyBoardScan_0:
   \   000000E6   EF0F               LDI     R16, 255
    153          	}
    154          	
    155          	return key_num;
   \                     ??keyBoardScan_1:
   \   000000E8   9508               RET
   \   000000EA                      REQUIRE _A_PORTC
   \   000000EA                      REQUIRE _A_PINC
    156          }
    157          
    158          
    159          
    160          
    161          
    162          //按键测试  假设初始化都已经完成

   \                                 In  segment CODE, align 2, keep-with-next
    163          void keyTest(void)
   \                     keyTest:
    164          {
   \   00000000   938A               ST      -Y, R24
    165          	unsigned char key_now;
    166          	static unsigned char key_store = 0;
    167          
    168          	while(1)
    169          	{
    170          		key_now = keyBoardScan();		//循环判断是否有按键按下
   \                     ??keyTest_0:
   \   00000002   ....               RCALL   keyBoardScan
   \   00000004   2F80               MOV     R24, R16
    171          		if(key_now != 0xff)
   \   00000006   3F8F               CPI     R24, 255
   \   00000008   F089               BREQ    ??keyTest_1
    172          		{
    173          			/*
    174          			switch(key)
    175          			{
    176          			 case 1: 
    177          //			   Display_Key(0x01);
    178          			   ledShowNumber(key ,wei_table,-1,10);
    179          			   key_store=0x01;break;   //根据键值显示到数码管上
    180          		     case 2: 
    181          //			   	Display_Key(0x02);
    182          			 	ledShowNumber(key ,wei_table,-1,10);
    183          			 	key_store=0x02;break;
    184          		     case 3: 
    185          //			   Display_Key(0x03);
    186          			   ledShowNumber(key ,wei_table,-1,10);
    187          			   key_store=0x03;break;
    188          		     case 4:
    189          //			   Display_Key(0x04);
    190          			   ledShowNumber(key ,wei_table,-1,10);
    191          			   key_store=0x04;break;
    192          		     case 5: 
    193          			   ledShowNumber(key ,wei_table,-1,10);
    194          			   key_store=0x05;break;
    195          		     case 6: Display_Key(0x06);key_store=0x06;break;
    196          		     case 7: Display_Key(0x07);key_store=0x07;break;
    197          		     case 8: Display_Key(0x08);key_store=0x08;break;
    198          		     case 9: Display_Key(0x09);key_store=0x09;break;
    199          		     case 0: Display_Key(0x00);key_store=0x00;break;
    200          		     case 10: Display_Key(0x0a);key_store=0x0a;break;
    201          		     case 11: Display_Key(0x0b);key_store=0x0b;break;
    202          		     case 12: Display_Key(0x0c);key_store=0x0c;break;
    203          		     case 13: Display_Key(0x0d);key_store=0x0d;break;
    204          	         case 14: Display_Key(0x0e);key_store=0x0e;break;
    205                       case 15: Display_Key(0x0f);key_store=0x0f;break;
    206          			 default:break;
    207          			}
    208          			*/
    209          			
    210          			//将unsigned char 赋值给unsigned int时出现错误
    211          //			key_store = (unsigned int)key & 0x00ff;
    212          			
    213          			key_store = key_now;
   \   0000000A   9380....           STS     ??key_store, R24
    214          			
    215          			ledShowNumber((unsigned long)key_now ,wei_table,-1,16);
   \   0000000E   E100               LDI     R16, 16
   \   00000010   E010               LDI     R17, 0
   \   00000012   931A               ST      -Y, R17
   \   00000014   930A               ST      -Y, R16
   \   00000016   EF6F               LDI     R22, 255
   \   00000018   EF7F               LDI     R23, 255
   \   0000001A   ....               LDI     R20, LOW(wei_table)
   \   0000001C   ....               LDI     R21, (wei_table) >> 8
   \   0000001E   2F08               MOV     R16, R24
   \   00000020   E010               LDI     R17, 0
   \   00000022   E020               LDI     R18, 0
   \   00000024   E030               LDI     R19, 0
   \   00000026   ........           CALL    ledShowNumber
   \   0000002A   CFEB               RJMP    ??keyTest_0
    216          		}
    217          		else
    218          		{
    219          //			Display_Key(key_store);
    220          			
    221          			ledShowNumber((unsigned long)key_store,wei_table,-1,16);
   \                     ??keyTest_1:
   \   0000002C   E100               LDI     R16, 16
   \   0000002E   E010               LDI     R17, 0
   \   00000030   931A               ST      -Y, R17
   \   00000032   930A               ST      -Y, R16
   \   00000034   EF6F               LDI     R22, 255
   \   00000036   EF7F               LDI     R23, 255
   \   00000038   ....               LDI     R20, LOW(wei_table)
   \   0000003A   ....               LDI     R21, (wei_table) >> 8
   \   0000003C   9100....           LDS     R16, ??key_store
   \   00000040   E010               LDI     R17, 0
   \   00000042   E020               LDI     R18, 0
   \   00000044   E030               LDI     R19, 0
   \   00000046   ........           CALL    ledShowNumber
   \   0000004A   CFDB               RJMP    ??keyTest_0
    222          		}
    223          	}
    224          	
    225          }

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
   \                     ??key_store:
   \   00000000                      DS8 1

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   indekeyBoardScan
      0      2   independentKeyInit
      0      2   intKeyInit
      0      2   interruptKeyInit
      0      2   keyBoardScan
      0      2   keyInit
      3      2   keyTest
        1      2   -> keyBoardScan
        3      2   -> ledShowNumber


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRC
       1  _A_DDRD
       1  _A_EICRA
       1  _A_EIMSK
       1  _A_PINC
       1  _A_PORTC
       1  _A_PORTD
      48  indekeyBoardScan
      12  independentKeyInit
      14  intKeyInit
      14  interruptKeyInit
     234  keyBoardScan
      10  keyInit
      76  keyTest
       1  key_store
       7  -- Other

 
   7 bytes in segment ABSOLUTE
 408 bytes in segment CODE
   7 bytes in segment INITTAB
   1 byte  in segment NEAR_Z
 
 408 bytes of CODE memory (+ 7 bytes shared)
   1 byte  of DATA memory (+ 7 bytes shared)

Errors: none
Warnings: none
