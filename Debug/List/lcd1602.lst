###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.20.2.50573 for Atmel AVR        12/Sep/2016  16:06:11 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Admin\Desktop\ATmega128Project\src\lcd1602.c    #
#    Command line =  C:\Users\Admin\Desktop\ATmega128Project\src\lcd1602.c    #
#                    --cpu=m128a -ms -o C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\Obj\ -lCN C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -lb C:\Users\Admin\Desktop\ATmega128Proje #
#                    ct\Debug\List\ -y --initializers_in_flash --no_cse       #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Admin\Desktop\ATmega128Project\inc\             #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Admin\Desktop\ATmega128Project\Debug\List\lcd16 #
#                    02.lst                                                   #
#    Object file  =  C:\Users\Admin\Desktop\ATmega128Project\Debug\Obj\lcd160 #
#                    2.r90                                                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Admin\Desktop\ATmega128Project\src\lcd1602.c
      1          //LCD液晶屏 1602的驱动
      2          
      3          //管脚连接信息
      4          //RS   H-数据寄存器  L-指令寄存器  	-->PF1
      5          //R/W  H-读			 L-写		   	-->PF2
      6          //EN   使能							-->PF3
      7          //DB0-DB7 --> AD0-AD7				-->PA0-PA7
      8          //PA0是LCD1602和LED数码管、LCD12864、TFTLCD共用
      9          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x31
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3a
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3b
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x62
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1
     10          #include "lcd1602.h"
     11          #include "ledshow.h"
     12          #include "delay.h"
     13          
     14          

   \                                 In  segment CODE, align 2, keep-with-next
     15          void lcd1602Init(void)
   \                     lcd1602Init:
     16          {
     17          	//IO口相应的初始化
     18          //	LCD_CON_OUT;	//PF1-PF3配置为输出模式
     19          	DDRF = 0xFF;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   9300....           STS     _A_DDRF, R16
     20          	PORTF = 0xFF;
   \   00000006   EF0F               LDI     R16, 255
   \   00000008   9300....           STS     _A_PORTF, R16
     21          	DATA_DDR  = 0xFF;	//PA0-PA7配置为输出
   \   0000000C   EF0F               LDI     R16, 255
   \   0000000E   BB0A               OUT     0x1A, R16
     22          	DATA_IO = 0xFF; 	//默认全部输出高电平
   \   00000010   EF0F               LDI     R16, 255
   \   00000012   BB0B               OUT     0x1B, R16
     23          	//关闭数码管，防止显示乱码
     24          	PORTD=0xFF;
   \   00000014   EF0F               LDI     R16, 255
   \   00000016   BB02               OUT     0x12, R16
     25          	DDRD=0xFF;
   \   00000018   EF0F               LDI     R16, 255
   \   0000001A   BB01               OUT     0x11, R16
     26          	D_LE1;                             //关掉数码管，以免显示乱码                   
   \   0000001C   9A94               SBI     0x12, 0x04
     27              W_LE1;                     
   \   0000001E   9A95               SBI     0x12, 0x05
     28              DATA_IO=0xFF;                      //关数码管            
   \   00000020   EF0F               LDI     R16, 255
   \   00000022   BB0B               OUT     0x1B, R16
     29              W_LE0; 
   \   00000024   9895               CBI     0x12, 0x05
     30          	
     31          	_delay_ms(20);
   \   00000026   E303               LDI     R16, 51
   \   00000028   E713               LDI     R17, 115
   \   0000002A   0000               NOP
   \   0000002C   5001               SUBI    R16, 1
   \   0000002E   4010               SBCI    R17, 0
   \   00000030   F7E1               BRNE    $-6
     32          	//数码管初始化
     33          	DDRA = 0xFF;				        //I/O口方向设置
   \   00000032   EF0F               LDI     R16, 255
   \   00000034   BB0A               OUT     0x1A, R16
     34          	DDRA |= (1 << 5) | (1 << 6) | (1 << 7);
   \   00000036   B30A               IN      R16, 0x1A
   \   00000038   6E00               ORI     R16, 0xE0
   \   0000003A   BB0A               OUT     0x1A, R16
     35          	lcd1602_Write_Command(0x38);		//显示模式设置
   \   0000003C   E308               LDI     R16, 56
   \   0000003E   ....               RCALL   lcd1602_Write_Command
     36          	_delay_ms(5);
   \   00000040   EF0F               LDI     R16, 255
   \   00000042   E213               LDI     R17, 35
   \   00000044   5001               SUBI    R16, 1
   \   00000046   4010               SBCI    R17, 0
   \   00000048   F7E9               BRNE    $-4
   \   0000004A   C000               RJMP    $+2
   \   0000004C   0000               NOP
     37          	lcd1602_Write_Command(0x08);		//显示关闭
   \   0000004E   E008               LDI     R16, 8
   \   00000050   ....               RCALL   lcd1602_Write_Command
     38          	_delay_ms(5);						
   \   00000052   EF0F               LDI     R16, 255
   \   00000054   E213               LDI     R17, 35
   \   00000056   5001               SUBI    R16, 1
   \   00000058   4010               SBCI    R17, 0
   \   0000005A   F7E9               BRNE    $-4
   \   0000005C   C000               RJMP    $+2
   \   0000005E   0000               NOP
     39          	lcd1602_Write_Command(0x01);		//显示清屏
   \   00000060   E001               LDI     R16, 1
   \   00000062   ....               RCALL   lcd1602_Write_Command
     40          	_delay_ms(5);
   \   00000064   EF0F               LDI     R16, 255
   \   00000066   E213               LDI     R17, 35
   \   00000068   5001               SUBI    R16, 1
   \   0000006A   4010               SBCI    R17, 0
   \   0000006C   F7E9               BRNE    $-4
   \   0000006E   C000               RJMP    $+2
   \   00000070   0000               NOP
     41          	lcd1602_Write_Command(0x06);		//显示光标移动设置
   \   00000072   E006               LDI     R16, 6
   \   00000074   ....               RCALL   lcd1602_Write_Command
     42          	_delay_ms(5);
   \   00000076   EF0F               LDI     R16, 255
   \   00000078   E213               LDI     R17, 35
   \   0000007A   5001               SUBI    R16, 1
   \   0000007C   4010               SBCI    R17, 0
   \   0000007E   F7E9               BRNE    $-4
   \   00000080   C000               RJMP    $+2
   \   00000082   0000               NOP
     43          	lcd1602_Write_Command(0x0C);		//显示开及光标设置
   \   00000084   E00C               LDI     R16, 12
   \   00000086   ....               RCALL   lcd1602_Write_Command
     44          	_delay_ms(5);
   \   00000088   EF0F               LDI     R16, 255
   \   0000008A   E213               LDI     R17, 35
   \   0000008C   5001               SUBI    R16, 1
   \   0000008E   4010               SBCI    R17, 0
   \   00000090   F7E9               BRNE    $-4
   \   00000092   C000               RJMP    $+2
   \   00000094   0000               NOP
     45          	
     46          }
   \   00000096   9508               RET
   \   00000098                      REQUIRE _A_DDRF
   \   00000098                      REQUIRE _A_PORTF
   \   00000098                      REQUIRE _A_DDRA
   \   00000098                      REQUIRE _A_PORTA
   \   00000098                      REQUIRE _A_PORTD
   \   00000098                      REQUIRE _A_DDRD
     47          
     48          //LCD1602显示屏命令写入函数

   \                                 In  segment CODE, align 2, keep-with-next
     49          void lcd1602_Write_Command(unsigned char com)
   \                     lcd1602_Write_Command:
     50          {
     51          	EN_CLR;
   \   00000000   91100062           LDS     R17, 98
   \   00000004   7F17               ANDI    R17, 0xF7
   \   00000006   93100062           STS     98, R17
     52          	RS_CLR;
   \   0000000A   91100062           LDS     R17, 98
   \   0000000E   7F1D               ANDI    R17, 0xFD
   \   00000010   93100062           STS     98, R17
     53          	RW_CLR;
   \   00000014   91100062           LDS     R17, 98
   \   00000018   7F1B               ANDI    R17, 0xFB
   \   0000001A   93100062           STS     98, R17
     54          	asm("nop");
   \   0000001E   0000               nop
     55          	EN_SET;
   \   00000020   91100062           LDS     R17, 98
   \   00000024   6018               ORI     R17, 0x08
   \   00000026   93100062           STS     98, R17
     56          	DATA_IO = com;
   \   0000002A   BB0B               OUT     0x1B, R16
     57          	_delay_ms(5);
   \   0000002C   EF2F               LDI     R18, 255
   \   0000002E   E233               LDI     R19, 35
   \   00000030   5021               SUBI    R18, 1
   \   00000032   4030               SBCI    R19, 0
   \   00000034   F7E9               BRNE    $-4
   \   00000036   C000               RJMP    $+2
   \   00000038   0000               NOP
     58          	EN_CLR;
   \   0000003A   91100062           LDS     R17, 98
   \   0000003E   7F17               ANDI    R17, 0xF7
   \   00000040   93100062           STS     98, R17
     59          }
   \   00000044   9508               RET
   \   00000046                      REQUIRE _A_PORTF
   \   00000046                      REQUIRE _A_PORTA
     60          
     61          //LCD1602显示屏数据写入函数

   \                                 In  segment CODE, align 2, keep-with-next
     62          void lcd1602_Write_Data(unsigned char data)
   \                     lcd1602_Write_Data:
     63          {
     64          	EN_CLR;
   \   00000000   91100062           LDS     R17, 98
   \   00000004   7F17               ANDI    R17, 0xF7
   \   00000006   93100062           STS     98, R17
     65          	RS_SET;
   \   0000000A   91100062           LDS     R17, 98
   \   0000000E   6012               ORI     R17, 0x02
   \   00000010   93100062           STS     98, R17
     66          	RW_CLR;
   \   00000014   91100062           LDS     R17, 98
   \   00000018   7F1B               ANDI    R17, 0xFB
   \   0000001A   93100062           STS     98, R17
     67          	asm("nop");
   \   0000001E   0000               nop
     68          	EN_SET;
   \   00000020   91100062           LDS     R17, 98
   \   00000024   6018               ORI     R17, 0x08
   \   00000026   93100062           STS     98, R17
     69          	DATA_IO = data;
   \   0000002A   BB0B               OUT     0x1B, R16
     70          	_delay_ms(5);
   \   0000002C   EF2F               LDI     R18, 255
   \   0000002E   E233               LDI     R19, 35
   \   00000030   5021               SUBI    R18, 1
   \   00000032   4030               SBCI    R19, 0
   \   00000034   F7E9               BRNE    $-4
   \   00000036   C000               RJMP    $+2
   \   00000038   0000               NOP
     71          	EN_CLR;
   \   0000003A   91100062           LDS     R17, 98
   \   0000003E   7F17               ANDI    R17, 0xF7
   \   00000040   93100062           STS     98, R17
     72          	RS_CLR;	
   \   00000044   91100062           LDS     R17, 98
   \   00000048   7F1D               ANDI    R17, 0xFD
   \   0000004A   93100062           STS     98, R17
     73          }
   \   0000004E   9508               RET
   \   00000050                      REQUIRE _A_PORTF
   \   00000050                      REQUIRE _A_PORTA
     74          
     75          //显示屏清空

   \                                 In  segment CODE, align 2, keep-with-next
     76          void lcd1602_Clear(void)
   \                     lcd1602_Clear:
     77          {
     78          	lcd1602_Write_Command(0x01);
   \   00000000   E001               LDI     R16, 1
   \   00000002   ....               RCALL   lcd1602_Write_Command
     79          	_delay_ms(5);
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   E213               LDI     R17, 35
   \   00000008   5001               SUBI    R16, 1
   \   0000000A   4010               SBCI    R17, 0
   \   0000000C   F7E9               BRNE    $-4
   \   0000000E   C000               RJMP    $+2
   \   00000010   0000               NOP
     80          }
   \   00000012   9508               RET
     81          
     82          //LCD1602显示单个字符
     83          //pos代表行号和列号 0x00-0x1F，例如0x10代表第二行第一位字符

   \                                 In  segment CODE, align 2, keep-with-next
     84          void lcd1602_Show_Char(unsigned char pos,unsigned char data)
   \                     lcd1602_Show_Char:
     85          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
   \   00000004   2F80               MOV     R24, R16
   \   00000006   2F91               MOV     R25, R17
     86          	
     87          	if(pos >= 0x20 )
   \   00000008   3280               CPI     R24, 32
   \   0000000A   F448               BRCC    ??lcd1602_Show_Char_0
     88          	{
     89          		//pos超过限制就无法正常显示
     90          		return ;
     91          	}
     92          	else
     93          	{
     94          		if(pos >= 0x10)
   \   0000000C   3180               CPI     R24, 16
   \   0000000E   F010               BRCS    ??lcd1602_Show_Char_1
     95          		{
     96          			pos += 0xB0;		//是第二行则高四位为0xB+0x1 =  0xC
   \   00000010   5580               SUBI    R24, 80
   \   00000012   C001               RJMP    ??lcd1602_Show_Char_2
     97          		}
     98          		else
     99          		{
    100          			pos += 0x80;		//是第一行则高四位为0x8			
   \                     ??lcd1602_Show_Char_1:
   \   00000014   5880               SUBI    R24, 128
    101          		}
    102          		lcd1602_Write_Command(pos);		//write command
   \                     ??lcd1602_Show_Char_2:
   \   00000016   2F08               MOV     R16, R24
   \   00000018   ....               RCALL   lcd1602_Write_Command
    103          		lcd1602_Write_Data(data);		//write data
   \   0000001A   2F09               MOV     R16, R25
   \   0000001C   ....               RCALL   lcd1602_Write_Data
    104          	}
    105          }
   \                     ??lcd1602_Show_Char_0:
   \   0000001E   9189               LD      R24, Y+
   \   00000020   9199               LD      R25, Y+
   \   00000022   9508               RET
    106          
    107          //显示屏字符串显示函数
    108          //line 0-1  start_num 0-f 

   \                                 In  segment CODE, align 2, keep-with-next
    109          void lcd1602_Show_Str(unsigned char pos,unsigned char * pstr)
   \                     lcd1602_Show_Str:
    110          {
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
   \   00000006   01C9               MOVW    R25:R24, R19:R18
    111          //	unsigned char i;
    112          	//1
    113          	/*
    114          	if(line == 0)
    115          	{
    116          		pos = start_num + 0x80;
    117          	}
    118          	else if(line == 1)
    119          	{
    120          		pos = start_num + 0xC0;
    121          	}
    122          	
    123          	lcd1602_Write_Command(pos);
    124          	while(*pstr)
    125          	{
    126          		lcd1602_Write_Data(*pstr);
    127          		pstr++;
    128          	}
    129          	*/
    130          //2
    131          	while(*pstr != '\0')
   \                     ??lcd1602_Show_Str_0:
   \   00000008   01FC               MOVW    R31:R30, R25:R24
   \   0000000A   8100               LD      R16, Z
   \   0000000C   2300               TST     R16
   \   0000000E   F039               BREQ    ??lcd1602_Show_Str_1
    132          //	for(i = start_num; i < 16; i++)
    133          	{
    134          		lcd1602_Show_Char(pos++,*(pstr++));
   \   00000010   01FC               MOVW    R31:R30, R25:R24
   \   00000012   8110               LD      R17, Z
   \   00000014   2F0A               MOV     R16, R26
   \   00000016   ....               RCALL   lcd1602_Show_Char
   \   00000018   95A3               INC     R26
   \   0000001A   9601               ADIW    R25:R24, 1
   \   0000001C   CFF5               RJMP    ??lcd1602_Show_Str_0
    135          	}
    136          	
    137          }
   \                     ??lcd1602_Show_Str_1:
   \   0000001E   E0E3               LDI     R30, 3
   \   00000020   ........           JMP     ?EPILOGUE_B3_L09
    138          
    139          
    140          
    141          
    142          
    143          
    144          
    145          
    146          
    147          
    148          
    149          
    150          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   lcd1602Init
        0      2   -> lcd1602_Write_Command
      0      2   lcd1602_Clear
        0      2   -> lcd1602_Write_Command
      2      2   lcd1602_Show_Char
        2      2   -> lcd1602_Write_Command
        2      2   -> lcd1602_Write_Data
      3      2   lcd1602_Show_Str
        3      2   -> lcd1602_Show_Char
      0      2   lcd1602_Write_Command
      0      2   lcd1602_Write_Data


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRA
       1  _A_DDRD
       1  _A_DDRF
       1  _A_PORTA
       1  _A_PORTD
       1  _A_PORTF
     152  lcd1602Init
      20  lcd1602_Clear
      36  lcd1602_Show_Char
      36  lcd1602_Show_Str
      70  lcd1602_Write_Command
      80  lcd1602_Write_Data

 
   6 bytes in segment ABSOLUTE
 394 bytes in segment CODE
 
 394 bytes of CODE memory
   0 bytes of DATA memory (+ 6 bytes shared)

Errors: none
Warnings: none
