###############################################################################
#                                                                             #
# IAR C/C++ Compiler V6.21.3.50641 for Atmel AVR        20/Sep/2016  17:32:32 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    Source file  =  C:\Users\Administrator\Desktop\ATmega128Project\src\led. #
#                    c                                                        #
#    Command line =  C:\Users\Administrator\Desktop\ATmega128Project\src\led. #
#                    c --cpu=m128a -ms -o C:\Users\Administrator\Desktop\ATme #
#                    ga128Project\Debug\Obj\ -lCN                             #
#                    C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\ -lb C:\Users\Administrator\Desktop\ATmega128Project\ #
#                    Debug\List\ -y --initializers_in_flash --no_cse          #
#                    --no_inline --no_code_motion --no_cross_call             #
#                    --no_clustering --no_tbaa --debug                        #
#                    -DENABLE_BIT_DEFINITIONS -e -I                           #
#                    C:\Users\Administrator\Desktop\ATmega128Project\inc\     #
#                    --eeprom_size 4096 --dlib --dlib_config "D:\Program      #
#                    Files (x86)\IAR Systems\Embedded Workbench               #
#                    6.5\avr\LIB\DLIB\dlAVR-3s-ec_mul-f.h" --vla              #
#                    --use_c++_inline -On                                     #
#    List file    =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Li #
#                    st\led.lst                                               #
#    Object file  =  C:\Users\Administrator\Desktop\ATmega128Project\Debug\Ob #
#                    j\led.r90                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\Administrator\Desktop\ATmega128Project\src\led.c
      1          #include <iom128a.h>

   \                                 In  segment ABSOLUTE, at 0x37
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1
      2          #include "led.h"
      3          #include "delay.h"
      4          
      5          
      6          
      7          /*
      8          **		LED初始化
      9          **配置对应的IO端口为输出模式
     10          **设置端口输出为0xff.默认关闭LED
     11          */

   \                                 In  segment CODE, align 2, keep-with-next
     12          void ledInit(void)
   \                     ledInit:
     13          {
     14          	DDRB = 0xff;
   \   00000000   EF0F               LDI     R16, 255
   \   00000002   BB07               OUT     0x17, R16
     15          	LED8 = 0xff;
   \   00000004   EF0F               LDI     R16, 255
   \   00000006   BB08               OUT     0x18, R16
     16          }
   \   00000008   9508               RET
   \   0000000A                      REQUIRE _A_DDRB
   \   0000000A                      REQUIRE _A_PORTB
     17          
     18          
     19          /*简单的流水灯小程序*/

   \                                 In  segment CODE, align 2, keep-with-next
     20          void ledRunning(void)
   \                     ledRunning:
     21          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
     22          	short int i = 0;
   \   00000004   E080               LDI     R24, 0
   \   00000006   E090               LDI     R25, 0
     23          	for(i = 0;i < 8;i++)
   \   00000008   E080               LDI     R24, 0
   \   0000000A   E090               LDI     R25, 0
   \                     ??ledRunning_0:
   \   0000000C   3088               CPI     R24, 8
   \   0000000E   E000               LDI     R16, 0
   \   00000010   0790               CPC     R25, R16
   \   00000012   F46C               BRGE    ??ledRunning_1
     24          	{
     25          		LED8 = ~(1 << i);
   \   00000014   2F48               MOV     R20, R24
   \   00000016   E001               LDI     R16, 1
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ........           CALL    ?S_SHL_L02
   \   0000001E   9500               COM     R16
   \   00000020   BB08               OUT     0x18, R16
     26          		delay(100);
   \   00000022   E604               LDI     R16, 100
   \   00000024   E010               LDI     R17, 0
   \   00000026   ........           CALL    delay
     27          	}
   \   0000002A   9601               ADIW    R25:R24, 1
   \   0000002C   CFEF               RJMP    ??ledRunning_0
     28          }
   \                     ??ledRunning_1:
   \   0000002E   9189               LD      R24, Y+
   \   00000030   9199               LD      R25, Y+
   \   00000032   9508               RET
   \   00000034                      REQUIRE _A_PORTB
     29          
     30          /*循环位移实现流水灯*/

   \                                 In  segment CODE, align 2, keep-with-next
     31          void ledRunning2(void)
   \                     ledRunning2:
     32          {
   \   00000000   939A               ST      -Y, R25
   \   00000002   938A               ST      -Y, R24
     33          	unsigned char a,b;
     34          	LED8 = 0xfe;
   \   00000004   EF0E               LDI     R16, 254
   \   00000006   BB08               OUT     0x18, R16
     35          	
     36          	ledInit();
   \   00000008   ....               RCALL   ledInit
     37          	while(1)
     38          	{
     39          		a = LED8 >> 7;
   \                     ??ledRunning2_0:
   \   0000000A   E000               LDI     R16, 0
   \   0000000C   99C7               SBIC    0x18, 0x07
   \   0000000E   9503               INC     R16
   \                     ??ledRunning2_1:
   \   00000010   2F80               MOV     R24, R16
     40          		b = LED8 << 1;
   \   00000012   B308               IN      R16, 0x18
   \   00000014   0F00               LSL     R16
   \   00000016   2F90               MOV     R25, R16
     41          		LED8 = a | b;
   \   00000018   2F08               MOV     R16, R24
   \   0000001A   2B09               OR      R16, R25
   \   0000001C   BB08               OUT     0x18, R16
     42          		delay(100);
   \   0000001E   E604               LDI     R16, 100
   \   00000020   E010               LDI     R17, 0
   \   00000022   ........           CALL    delay
   \   00000026   CFF1               RJMP    ??ledRunning2_0
   \   00000028                      REQUIRE _A_PORTB
     43          	}
     44          }
     45          
     46          /*
     47          **模拟PWM输出实现呼吸灯的效果
     48          **unsigned int cled中为0的一位为控制的呼吸灯
     49          */ 

   \                                 In  segment CODE, align 2, keep-with-next
     50          void ledBreath(unsigned char cled)
   \                     ledBreath:
     51          {
   \   00000000   ........           CALL    ?PROLOGUE3_L09
   \   00000004   2FA0               MOV     R26, R16
     52          	unsigned int i = 0;
   \   00000006   E080               LDI     R24, 0
   \   00000008   E090               LDI     R25, 0
     53          	
     54          	//周期为2S的PWM输出
     55          	for(i = 0; i < PWM_NUM;i++)		//1s分为两千份
   \   0000000A   E080               LDI     R24, 0
   \   0000000C   E090               LDI     R25, 0
   \                     ??ledBreath_0:
   \   0000000E   3E88               CPI     R24, 232
   \   00000010   E003               LDI     R16, 3
   \   00000012   0790               CPC     R25, R16
   \   00000014   F470               BRCC    ??ledBreath_1
     56          	{
     57          			LED8 = cled;	//点亮相应的LED
   \   00000016   BBA8               OUT     0x18, R26
     58          			delay_us(i);	
   \   00000018   018C               MOVW    R17:R16, R25:R24
   \   0000001A   ........           CALL    delay_us
     59          			LED8 = 0xff;	//关闭相应的LED
   \   0000001E   EF0F               LDI     R16, 255
   \   00000020   BB08               OUT     0x18, R16
     60          			delay_us(PWM_NUM - i);
   \   00000022   EE08               LDI     R16, 232
   \   00000024   E013               LDI     R17, 3
   \   00000026   1B08               SUB     R16, R24
   \   00000028   0B19               SBC     R17, R25
   \   0000002A   ........           CALL    delay_us
     61          	}
   \   0000002E   9601               ADIW    R25:R24, 1
   \   00000030   CFEE               RJMP    ??ledBreath_0
     62          	for(i = PWM_NUM; i > 0 ; i--)
   \                     ??ledBreath_1:
   \   00000032   EE88               LDI     R24, 232
   \   00000034   E093               LDI     R25, 3
   \                     ??ledBreath_2:
   \   00000036   2F08               MOV     R16, R24
   \   00000038   2B09               OR      R16, R25
   \   0000003A   F071               BREQ    ??ledBreath_3
     63          	{
     64          			LED8 = cled;	//点亮相应的LED
   \   0000003C   BBA8               OUT     0x18, R26
     65          			delay_us(i);
   \   0000003E   018C               MOVW    R17:R16, R25:R24
   \   00000040   ........           CALL    delay_us
     66          			LED8 = 0xff;	//关闭所有的LED
   \   00000044   EF0F               LDI     R16, 255
   \   00000046   BB08               OUT     0x18, R16
     67          			delay_us(PWM_NUM - i);
   \   00000048   EE08               LDI     R16, 232
   \   0000004A   E013               LDI     R17, 3
   \   0000004C   1B08               SUB     R16, R24
   \   0000004E   0B19               SBC     R17, R25
   \   00000050   ........           CALL    delay_us
     68          	}
   \   00000054   9701               SBIW    R25:R24, 1
   \   00000056   CFEF               RJMP    ??ledBreath_2
     69          	
     70          }
   \                     ??ledBreath_3:
   \   00000058   E0E3               LDI     R30, 3
   \   0000005A   ........           JMP     ?EPILOGUE_B3_L09
   \   0000005E                      REQUIRE _A_PORTB
     71          
     72          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      3      2   ledBreath
        3      2   -> delay_us
      0      2   ledInit
      2      4   ledRunning
        2      2   -> delay
      2      2   ledRunning2
        2      2   -> delay
        2      2   -> ledInit


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  _A_DDRB
       1  _A_PORTB
      94  ledBreath
      10  ledInit
      52  ledRunning
      40  ledRunning2

 
   2 bytes in segment ABSOLUTE
 196 bytes in segment CODE
 
 196 bytes of CODE memory
   0 bytes of DATA memory (+ 2 bytes shared)

Errors: none
Warnings: none
